var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "../toolbar/toolbar"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, toolbar_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CLS_TAB = 'e-tab';
    var CLS_HEADER = 'e-tab-header';
    var CLS_CONTENT = 'e-content';
    var CLS_ITEMS = 'e-items';
    var CLS_ITEM = 'e-item';
    var CLS_TEMPLATE = 'e-template';
    var CLS_RTL = 'e-rtl';
    var CLS_ACTIVE = 'e-active';
    var CLS_DISABLE = 'e-disable';
    var CLS_HIDDEN = 'e-hidden';
    var CLS_FOCUS = 'e-focused';
    var CLS_ICONS = 'e-icons';
    var CLS_ICON = 'e-icon';
    var CLS_ICON_CLOSE = 'e-close-icon';
    var CLS_CLOSE_SHOW = 'e-close-show';
    var CLS_TEXT = 'e-tab-text';
    var CLS_INDICATOR = 'e-indicator';
    var CLS_WRAP = 'e-tab-wrap';
    var CLS_TEXT_WRAP = 'e-text-wrap';
    var CLS_TAB_ICON = 'e-tab-icon';
    var CLS_TB_ITEMS = 'e-toolbar-items';
    var CLS_TB_ITEM = 'e-toolbar-item';
    var CLS_TB_POP = 'e-toolbar-pop';
    var CLS_TB_POPUP = 'e-toolbar-popup';
    var CLS_POPUP_OPEN = 'e-popup-open';
    var CLS_POPUP_CLOSE = 'e-popup-close';
    var CLS_PROGRESS = 'e-progress';
    var CLS_IGNORE = 'e-ignore';
    var TabActionSettings = (function (_super) {
        __extends(TabActionSettings, _super);
        function TabActionSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('SlideLeftIn')
        ], TabActionSettings.prototype, "effect", void 0);
        __decorate([
            ej2_base_1.Property(600)
        ], TabActionSettings.prototype, "duration", void 0);
        __decorate([
            ej2_base_1.Property('ease')
        ], TabActionSettings.prototype, "easing", void 0);
        return TabActionSettings;
    }(ej2_base_2.ChildProperty));
    exports.TabActionSettings = TabActionSettings;
    var TabAnimationSettings = (function (_super) {
        __extends(TabAnimationSettings, _super);
        function TabAnimationSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Complex({ effect: 'SlideLeftIn', duration: 600, easing: 'ease' }, TabActionSettings)
        ], TabAnimationSettings.prototype, "previous", void 0);
        __decorate([
            ej2_base_1.Complex({ effect: 'SlideRightIn', duration: 600, easing: 'ease' }, TabActionSettings)
        ], TabAnimationSettings.prototype, "next", void 0);
        return TabAnimationSettings;
    }(ej2_base_2.ChildProperty));
    exports.TabAnimationSettings = TabAnimationSettings;
    var Header = (function (_super) {
        __extends(Header, _super);
        function Header() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('')
        ], Header.prototype, "text", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], Header.prototype, "iconCss", void 0);
        __decorate([
            ej2_base_1.Property('left')
        ], Header.prototype, "iconPosition", void 0);
        return Header;
    }(ej2_base_2.ChildProperty));
    exports.Header = Header;
    var TabItem = (function (_super) {
        __extends(TabItem, _super);
        function TabItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Complex({}, Header)
        ], TabItem.prototype, "header", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], TabItem.prototype, "content", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], TabItem.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], TabItem.prototype, "disabled", void 0);
        return TabItem;
    }(ej2_base_2.ChildProperty));
    exports.TabItem = TabItem;
    var Tab = (function (_super) {
        __extends(Tab, _super);
        function Tab(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.prevIndex = 0;
            _this.show = { name: 'SlideDown', duration: 100 };
            _this.hide = { name: 'SlideUp', duration: 100 };
            _this.animateOptions = {};
            _this.animObj = new ej2_base_5.Animation(_this.animateOptions);
            _this.maxHeight = 0;
            _this.title = 'Close';
            _this.keyConfigs = {
                tab: 'tab',
                home: 'home',
                end: 'end',
                enter: 'enter',
                space: 'space',
                delete: 'delete',
                moveLeft: 'leftarrow',
                moveRight: 'rightarrow',
                moveUp: 'uparrow',
                moveDown: 'downarrow'
            };
            return _this;
        }
        Tab.prototype.destroy = function () {
            var _this = this;
            if (!ej2_base_4.isNullOrUndefined(this.tbObj)) {
                this.tbObj.destroy();
            }
            this.unWireEvents();
            ['role', 'aria-disabled', 'aria-activedescendant', 'tabindex', 'aria-orientation'].forEach(function (val) {
                _this.element.removeAttribute(val);
            });
            this.expTemplateContent();
            if (!this.isTemplate) {
                this.element.innerHTML = '';
            }
            else {
                var cntEle = ej2_base_2.select('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element);
                this.element.classList.remove(CLS_TEMPLATE);
                if (!ej2_base_4.isNullOrUndefined(cntEle)) {
                    cntEle.innerHTML = this.cnt;
                }
            }
            _super.prototype.destroy.call(this);
            this.trigger('destroyed');
        };
        Tab.prototype.preRender = function () {
            this.isPopup = false;
            this.initRender = true;
            this.isSwipeed = false;
            this.templateEle = [];
            var name = ej2_base_3.Browser.info.name;
            var css = (name === 'msie') ? 'e-ie' : (name === 'edge') ? 'e-edge' : (name === 'safari') ? 'e-safari' : '';
            ej2_base_4.setStyleAttribute(this.element, { 'width': ej2_base_3.formatUnit(this.width), 'height': ej2_base_3.formatUnit(this.height) });
            this.setCssClass(this.element, this.cssClass, true);
            ej2_base_1.attributes(this.element, { role: 'tablist', 'aria-disabled': 'false', 'aria-activedescendant': '' });
            this.setCssClass(this.element, css, true);
        };
        Tab.prototype.render = function () {
            this.renderContainer();
            this.wireEvents();
            this.initRender = false;
        };
        Tab.prototype.renderContainer = function () {
            var ele = this.element;
            if (this.items.length > 0 && ele.children.length === 0) {
                ele.appendChild(ej2_base_4.createElement('div', { className: CLS_CONTENT }));
                this.setOrientation(this.headerPlacement, ej2_base_4.createElement('div', { className: CLS_HEADER }));
                this.isTemplate = false;
            }
            else if (this.element.children.length > 0) {
                this.isTemplate = true;
                ele.classList.add(CLS_TEMPLATE);
                var header = ele.querySelector('.' + CLS_HEADER);
                if (header && this.headerPlacement === 'Bottom') {
                    this.setOrientation(this.headerPlacement, header);
                }
            }
            if (!ej2_base_4.isNullOrUndefined(ej2_base_2.select('.' + CLS_HEADER, this.element)) && !ej2_base_4.isNullOrUndefined(ej2_base_2.select('.' + CLS_CONTENT, this.element))) {
                this.renderHeader();
                this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
                if (!ej2_base_4.isNullOrUndefined(this.tbItems)) {
                    ej2_base_5.rippleEffect(this.tbItems, { selector: '.e-tab-wrap' });
                }
                this.renderContent();
                if (ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element).length > 0) {
                    this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
                    this.bdrLine = ej2_base_4.createElement('div', { className: CLS_INDICATOR + ' ' + CLS_HIDDEN + ' ' + CLS_IGNORE });
                    var scrCnt = ej2_base_2.select('.e-hscroll-content', this.tbItems);
                    if (!ej2_base_4.isNullOrUndefined(scrCnt)) {
                        scrCnt.insertBefore(this.bdrLine, scrCnt.firstChild);
                    }
                    else {
                        this.tbItems.insertBefore(this.bdrLine, this.tbItems.firstChild);
                    }
                    this.setContentHeight(true);
                    this.select(this.selectedItem);
                }
                this.setRTL(this.enableRtl);
            }
        };
        Tab.prototype.renderHeader = function () {
            var _this = this;
            var tabItems = [];
            this.hdrEle = ej2_base_2.select('.' + CLS_HEADER, this.element);
            this.btnCls = ej2_base_4.createElement('span', { className: CLS_ICONS + ' ' + CLS_ICON_CLOSE, attrs: { title: this.title } }).outerHTML;
            if (!this.isTemplate) {
                tabItems = this.parseObject(this.items, 0);
            }
            else {
                var count = this.hdrEle.children.length;
                var hdrItems = [];
                for (var i = 0; i < count; i++) {
                    hdrItems.push(this.hdrEle.children.item(i).innerHTML);
                }
                if (count > 0) {
                    this.hdrEle.innerHTML = '';
                    this.hdrEle.appendChild(ej2_base_4.createElement('div', { className: CLS_ITEMS }));
                    hdrItems.forEach(function (item, index) {
                        var attr = {
                            className: CLS_ITEM, id: CLS_ITEM + '_' + index,
                            attrs: { role: 'tab', 'aria-controls': CLS_CONTENT + '_' + index, 'aria-selected': 'false' }
                        };
                        var txt = ej2_base_4.createElement('span', { className: CLS_TEXT, innerHTML: item, attrs: { 'role': 'presentation' } }).outerHTML;
                        var cont = ej2_base_4.createElement('div', { className: CLS_TEXT_WRAP, innerHTML: txt + _this.btnCls }).outerHTML;
                        var wrap = ej2_base_4.createElement('div', { className: CLS_WRAP, innerHTML: cont, attrs: { tabIndex: '-1' } });
                        ej2_base_2.select('.' + CLS_ITEMS, _this.element).appendChild(ej2_base_4.createElement('div', attr));
                        ej2_base_4.selectAll('.' + CLS_ITEM, _this.element)[index].appendChild(wrap);
                    });
                }
            }
            this.tbObj = new toolbar_1.Toolbar({
                width: '100%',
                overflowMode: this.overflowMode,
                items: (tabItems.length !== 0) ? tabItems : [],
                clicked: this.clickHandler.bind(this)
            });
            this.tbObj.appendTo(this.hdrEle);
            ej2_base_1.attributes(this.element, { 'aria-orientation': 'horizontal' });
            this.setCloseButton(this.showCloseButton);
            this.setProperties({ headerPlacement: (this.element.children.item(0).classList.contains(CLS_HEADER)) ? 'Top' : 'Bottom' }, true);
        };
        Tab.prototype.renderContent = function () {
            this.cntEle = ej2_base_2.select('.' + CLS_CONTENT, this.element);
            var hdrItem = ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element);
            if (this.isTemplate) {
                this.cnt = (this.cntEle.children.length > 0) ? this.cntEle.innerHTML : '';
                var contents = this.cntEle.children;
                for (var i = 0; i < hdrItem.length; i++) {
                    if (contents.length - 1 >= i) {
                        contents.item(i).className += CLS_ITEM;
                        ej2_base_1.attributes(contents.item(i), { 'role': 'tabpanel', 'aria-labelledby': CLS_ITEM + '_' + i });
                        contents.item(i).id = CLS_CONTENT + '_' + i;
                    }
                }
            }
        };
        Tab.prototype.parseObject = function (items, index) {
            var _this = this;
            var inHTML = '';
            var tbCount = ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element).length;
            var tItems = [];
            items.forEach(function (item, i) {
                var pos = (ej2_base_4.isNullOrUndefined(item.header.iconPosition)) ? '' : item.header.iconPosition;
                var css = (ej2_base_4.isNullOrUndefined(item.header.iconCss)) ? '' : item.header.iconCss;
                var txt = item.header.text;
                var id = ((tbCount === 0) ? i : (_this.isReplace === true) ? (i + index) : tbCount + i);
                var disabled = (item.disabled) ? ' ' + CLS_DISABLE : '';
                var tHtml = ((txt instanceof Object) ? txt.outerHTML : txt);
                var txtEmpty = (!ej2_base_4.isNullOrUndefined(tHtml) && tHtml !== '');
                var tEle = (txtEmpty) ? ej2_base_4.createElement('div', {
                    className: CLS_TEXT, innerHTML: tHtml, attrs: { 'role': 'presentation' }
                }).outerHTML : '';
                var icon = ej2_base_4.createElement('span', {
                    className: CLS_ICONS + ' ' + CLS_TAB_ICON + ' ' + CLS_ICON + '-' + pos + ' ' + css
                }).outerHTML;
                if ((txt === '' || txt === undefined) && css === '') {
                    return;
                }
                else {
                    if ((txt !== '' && txt !== undefined) && css !== '') {
                        inHTML = (pos === 'left' || pos === 'top') ? icon + '' + tEle : tEle + '' + icon;
                    }
                    else {
                        inHTML = (css === '') ? tEle : icon;
                    }
                }
                var wrapAttrs = (item.disabled) ? {} : { tabIndex: '-1' };
                var tCont = ej2_base_4.createElement('div', { className: CLS_TEXT_WRAP, innerHTML: inHTML + '' + _this.btnCls }).outerHTML;
                var wrap = ej2_base_4.createElement('div', { className: CLS_WRAP, innerHTML: tCont, attrs: wrapAttrs });
                var attrObj = {
                    id: CLS_ITEM + '_' + id, role: 'tab', 'aria-selected': 'false'
                };
                var tItem = { htmlAttributes: attrObj, template: wrap.outerHTML };
                tItem.cssClass = item.cssClass + ' ' + disabled + ' ' + ((css !== '') ? 'e-i' + pos : '') + ' ' + ((!txtEmpty) ? CLS_ICON : '');
                if (pos === 'top' || pos === 'bottom') {
                    _this.element.classList.add('e-vertical-icon');
                }
                tItems.push(tItem);
            });
            return tItems;
        };
        Tab.prototype.removeActiveClass = function (id) {
            var hdrActEle = ej2_base_4.selectAll(':root .' + CLS_HEADER + ' .' + CLS_TB_ITEM + '.' + CLS_ACTIVE, this.element)[0];
            if (this.headerPlacement === 'Bottom') {
                hdrActEle = ej2_base_4.selectAll(':root .' + CLS_HEADER + ' .' + CLS_TB_ITEM + '.' + CLS_ACTIVE, this.element.children[1])[0];
            }
            if (!ej2_base_4.isNullOrUndefined(hdrActEle)) {
                hdrActEle.classList.remove(CLS_ACTIVE);
                var no = this.extIndex(hdrActEle.id);
                var trg = this.findEle(ej2_base_2.select('.e-content', this.element).children, CLS_CONTENT + '_' + no);
            }
        };
        Tab.prototype.checkPopupOverflow = function (ele) {
            this.tbPop = ej2_base_2.select('.' + CLS_TB_POP, this.element);
            var popIcon = ej2_base_2.select('.e-hor-nav', this.element);
            var tbrItems = ej2_base_2.select('.' + CLS_TB_ITEMS, this.element);
            if ((this.enableRtl && ((popIcon.offsetLeft + popIcon.offsetWidth) > tbrItems.offsetLeft))
                || (!this.enableRtl && popIcon.offsetLeft < tbrItems.offsetWidth)) {
                ele.classList.add(CLS_TB_POPUP);
                this.tbPop.insertBefore(ele.cloneNode(true), ej2_base_4.selectAll('.' + CLS_TB_POPUP, this.tbPop)[0]);
                ele.outerHTML = '';
            }
            return true;
        };
        Tab.prototype.popupHandler = function (target) {
            var ripEle = target.querySelector('.e-ripple-element');
            if (!ej2_base_4.isNullOrUndefined(ripEle)) {
                ripEle.outerHTML = '';
                target.querySelector('.' + CLS_WRAP).classList.remove('e-ripple');
            }
            this.tbItem = ej2_base_4.selectAll('.' + CLS_TB_ITEMS + ' .' + CLS_TB_ITEM, this.hdrEle);
            var lastChild = this.tbItem[this.tbItem.length - 1];
            if (this.tbItem.length !== 0) {
                target.classList.remove(CLS_TB_POPUP);
                this.tbItems.appendChild(target.cloneNode(true));
                this.actEleId = target.id;
                target.outerHTML = '';
                if (this.checkPopupOverflow(lastChild)) {
                    var prevEle = this.tbItems.lastChild.previousElementSibling;
                    this.checkPopupOverflow(prevEle);
                }
                this.isPopup = true;
            }
            return ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.tbItems).length - 1;
        };
        Tab.prototype.setCloseButton = function (val) {
            var trg = ej2_base_2.select('.' + CLS_HEADER, this.element);
            (val === true) ? trg.classList.add(CLS_CLOSE_SHOW) : trg.classList.remove(CLS_CLOSE_SHOW);
            this.tbObj.refreshOverflow();
            this.refreshActElePosition();
        };
        Tab.prototype.prevCtnAnimation = function (prev, current) {
            var animation;
            var checkRTL = this.enableRtl || this.element.classList.contains(CLS_RTL);
            if (this.isPopup || prev <= current) {
                if (this.animation.previous.effect === 'SlideLeftIn') {
                    animation = { name: 'SlideLeftOut',
                        duration: this.animation.previous.duration, timingFunction: this.animation.previous.easing };
                }
                else {
                    animation = null;
                }
            }
            else {
                if (this.animation.next.effect === 'SlideRightIn') {
                    animation = { name: 'SlideRightOut',
                        duration: this.animation.next.duration, timingFunction: this.animation.next.easing };
                }
                else {
                    animation = null;
                }
            }
            return animation;
        };
        Tab.prototype.triggerPrevAnimation = function (oldCnt, prevIndex) {
            var animateObj = this.prevCtnAnimation(prevIndex, this.selectedItem);
            if (!ej2_base_4.isNullOrUndefined(animateObj)) {
                animateObj.begin = function () {
                    ej2_base_4.setStyleAttribute(oldCnt, { 'position': 'absolute' });
                    oldCnt.classList.add(CLS_PROGRESS);
                    oldCnt.classList.add('e-view');
                };
                animateObj.end = function () {
                    oldCnt.style.display = 'none';
                    oldCnt.classList.remove(CLS_ACTIVE);
                    oldCnt.classList.remove(CLS_PROGRESS);
                    oldCnt.classList.remove('e-view');
                    ej2_base_4.setStyleAttribute(oldCnt, { 'display': '', 'position': '' });
                };
                new ej2_base_5.Animation(animateObj).animate(oldCnt);
            }
            else {
                oldCnt.classList.remove(CLS_ACTIVE);
            }
        };
        Tab.prototype.triggerAnimation = function (id, value) {
            var _this = this;
            var prevIndex = this.prevIndex;
            var itemCollection = [].slice.call(this.element.querySelector('.' + CLS_CONTENT).children);
            var oldCnt;
            itemCollection.forEach(function (item) {
                if (item.id === _this.prevActiveEle) {
                    oldCnt = item;
                }
            });
            var prevEle = this.tbItem[prevIndex];
            var no = this.extIndex(this.tbItem[this.selectedItem].id);
            var newCnt;
            newCnt = this.findEle(this.cntEle.children, CLS_CONTENT + '_' + no);
            if (ej2_base_4.isNullOrUndefined(oldCnt) && !ej2_base_4.isNullOrUndefined(prevEle)) {
                var idNo = this.extIndex(prevEle.id);
                oldCnt = this.findEle(this.cntEle.children, CLS_CONTENT + '_' + idNo);
            }
            if (this.initRender || value === false || this.animation === {} || ej2_base_4.isNullOrUndefined(this.animation)) {
                if (oldCnt && oldCnt !== newCnt) {
                    oldCnt.classList.remove(CLS_ACTIVE);
                }
                return;
            }
            var cnt = ej2_base_2.select('.' + CLS_CONTENT, this.element);
            var animateObj;
            if (this.prevIndex > this.selectedItem && !this.isPopup) {
                var openEff = this.animation.previous.effect;
                animateObj = {
                    name: ((openEff === 'None') ? '' : ((openEff !== 'SlideLeftIn') ? openEff : 'SlideLeftIn')),
                    duration: this.animation.previous.duration,
                    timingFunction: this.animation.previous.easing
                };
            }
            else if (this.isPopup || this.prevIndex < this.selectedItem || this.prevIndex === this.selectedItem) {
                var clsEff = this.animation.next.effect;
                animateObj = {
                    name: ((clsEff === 'None') ? '' : ((clsEff !== 'SlideRightIn') ? clsEff : 'SlideRightIn')),
                    duration: this.animation.next.duration,
                    timingFunction: this.animation.next.easing
                };
            }
            animateObj.progress = function () {
                cnt.classList.add(CLS_PROGRESS);
                _this.setActiveBorder();
            };
            animateObj.end = function () {
                cnt.classList.remove(CLS_PROGRESS);
                newCnt.classList.add(CLS_ACTIVE);
            };
            if (!this.initRender) {
                this.triggerPrevAnimation(oldCnt, prevIndex);
            }
            this.prevActiveEle = newCnt.id;
            this.isPopup = false;
            if (animateObj.name === '') {
                newCnt.classList.add(CLS_ACTIVE);
            }
            else {
                new ej2_base_5.Animation(animateObj).animate(newCnt);
            }
        };
        Tab.prototype.keyPressed = function (trg) {
            var trgParent = ej2_base_1.closest(trg, '.' + CLS_HEADER + ' .' + CLS_TB_ITEM);
            var trgIndex = this.getEleIndex(trgParent);
            if (!ej2_base_4.isNullOrUndefined(this.popEle) && trg.classList.contains('e-hor-nav')) {
                (this.popEle.classList.contains(CLS_POPUP_OPEN)) ? this.popObj.hide(this.hide) : this.popObj.show(this.show);
            }
            else if (trg.classList.contains('e-scroll-nav')) {
                trg.click();
            }
            else {
                if (!ej2_base_4.isNullOrUndefined(trgParent) && trgParent.classList.contains(CLS_ACTIVE) === false) {
                    this.select(trgIndex);
                    if (!ej2_base_4.isNullOrUndefined(this.popEle)) {
                        this.popObj.hide(this.hide);
                    }
                }
            }
        };
        Tab.prototype.getEleIndex = function (item) {
            return Array.prototype.indexOf.call(ej2_base_4.selectAll('.' + CLS_HEADER + ' .' + CLS_TB_ITEM, this.element), item);
        };
        Tab.prototype.extIndex = function (id) {
            return id.replace(CLS_ITEM + '_', '');
        };
        Tab.prototype.expTemplateContent = function () {
            var _this = this;
            this.templateEle.forEach(function (eleStr) {
                document.body.appendChild(_this.element.querySelector(eleStr)).style.display = 'none';
            });
        };
        Tab.prototype.templateCompile = function (ele, cnt) {
            var tempEle = ej2_base_4.createElement('div');
            var templateFn = ej2_base_5.compile(cnt);
            if (!ej2_base_4.isNullOrUndefined(templateFn) && templateFn().length > 0) {
                [].slice.call(templateFn()).forEach(function (el) {
                    tempEle.appendChild(el);
                });
                ele.appendChild(tempEle);
                ele.appendChild(tempEle);
            }
        };
        Tab.prototype.getContent = function (ele, index, callType) {
            var eleStr;
            var cnt = this.items[Number(index)].content;
            if (typeof cnt === 'string' || ej2_base_4.isNullOrUndefined(cnt.innerHTML)) {
                if (cnt[0] === '.' || cnt[0] === '#') {
                    if (document.querySelectorAll(cnt).length) {
                        var eleVal = document.querySelector(cnt);
                        eleStr = eleVal.outerHTML.trim();
                        if (callType === 'clone') {
                            ele.appendChild(eleVal.cloneNode(true));
                        }
                        else {
                            ele.appendChild(eleVal);
                            eleVal.style.display = '';
                        }
                    }
                    else {
                        this.templateCompile(ele, cnt);
                    }
                }
                else {
                    this.templateCompile(ele, cnt);
                }
            }
            else {
                ele.innerHTML = cnt.outerHTML;
            }
            if (!ej2_base_4.isNullOrUndefined(eleStr)) {
                this.templateEle.push(cnt.toString());
            }
        };
        Tab.prototype.findEle = function (items, key) {
            var ele;
            for (var i = 0; i < items.length; i++) {
                if (items[i].id === key) {
                    ele = items[i];
                    break;
                }
            }
            return ele;
        };
        Tab.prototype.setOrientation = function (place, ele) {
            (place === 'Bottom') ? this.element.appendChild(ele) : this.element.insertBefore(ele, ej2_base_2.select('.' + CLS_CONTENT, this.element));
        };
        Tab.prototype.setCssClass = function (ele, cls, val) {
            if (cls === '') {
                return;
            }
            var list = cls.split(' ');
            for (var i = 0; i < list.length; i++) {
                if (val) {
                    ele.classList.add(list[i]);
                }
                else {
                    ele.classList.remove(list[i]);
                }
            }
        };
        Tab.prototype.setContentHeight = function (val) {
            if (ej2_base_4.isNullOrUndefined(this.cntEle)) {
                return;
            }
            var height;
            var hdrEle = ej2_base_2.select('.' + CLS_HEADER, this.element);
            if (this.heightAdjustMode === 'None') {
                if (this.height === 'auto') {
                    return;
                }
                else {
                    ej2_base_4.setStyleAttribute(this.cntEle, { 'height': (this.element.offsetHeight - hdrEle.offsetHeight) + 'px' });
                }
            }
            else if (this.heightAdjustMode === 'Fill') {
                ej2_base_4.setStyleAttribute(this.element, { 'height': '100%' });
                ej2_base_4.setStyleAttribute(this.cntEle, { 'height': 'auto' });
            }
            else if (this.heightAdjustMode === 'Auto') {
                var cnt = ej2_base_4.selectAll('.' + CLS_CONTENT + ' > .' + CLS_ITEM, this.element);
                if (this.isTemplate === true) {
                    for (var i = 0; i < cnt.length; i++) {
                        cnt[i].setAttribute('style', 'display:block; visibility: visible');
                        this.maxHeight = Math.max(this.maxHeight, this.getHeight(cnt[i]));
                        cnt[i].style.removeProperty('display');
                        cnt[i].style.removeProperty('visibility');
                    }
                }
                else {
                    this.cntEle = ej2_base_2.select('.' + CLS_CONTENT, this.element);
                    if (val === true) {
                        this.cntEle.appendChild(ej2_base_4.createElement('div', {
                            id: (CLS_CONTENT + '_' + 0), className: CLS_ITEM + ' ' + CLS_ACTIVE,
                            attrs: { 'role': 'tabpanel', 'aria-labelledby': CLS_ITEM + '_' + 0 }
                        }));
                    }
                    var ele = this.cntEle.children.item(0);
                    for (var i = 0; i < this.items.length; i++) {
                        this.getContent(ele, i, 'clone');
                        this.maxHeight = Math.max(this.maxHeight, this.getHeight(ele));
                        ele.innerHTML = '';
                    }
                    this.templateEle = [];
                    this.getContent(ele, 0, 'render');
                    ele.classList.remove(CLS_ACTIVE);
                }
                ej2_base_4.setStyleAttribute(this.cntEle, { 'height': this.maxHeight + 'px' });
            }
            else {
                ej2_base_4.setStyleAttribute(this.cntEle, { 'height': 'auto' });
            }
        };
        Tab.prototype.getHeight = function (ele) {
            var cs = window.getComputedStyle(ele);
            return ele.offsetHeight + parseFloat(cs.getPropertyValue('padding-top')) + parseFloat(cs.getPropertyValue('padding-bottom')) +
                parseFloat(cs.getPropertyValue('margin-top')) + parseFloat(cs.getPropertyValue('margin-bottom'));
        };
        Tab.prototype.setActiveBorder = function () {
            var trg = ej2_base_2.select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, this.element);
            if (this.headerPlacement === 'Bottom') {
                trg = ej2_base_2.select('.' + CLS_TB_ITEM + '.' + CLS_ACTIVE, this.element.children[1]);
            }
            if (trg === null) {
                return;
            }
            var root = ej2_base_1.closest(trg, '.' + CLS_TAB);
            if (this.element !== root) {
                return;
            }
            var hsCnt = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS + ' .e-hscroll-content', this.element.children[0]);
            this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
            var bar = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_INDICATOR, this.element);
            if (this.headerPlacement === 'Bottom') {
                hsCnt = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS + ' .e-hscroll-content', this.element.children[1]);
            }
            var tbWidth = (ej2_base_4.isNullOrUndefined(hsCnt)) ? this.tbItems.offsetWidth : hsCnt.offsetWidth;
            if (tbWidth !== 0) {
                ej2_base_4.setStyleAttribute(bar, { 'left': trg.offsetLeft + 'px', 'right': tbWidth - (trg.offsetLeft + trg.offsetWidth) + 'px' });
            }
            else {
                ej2_base_4.setStyleAttribute(bar, { 'left': 'auto', 'right': 'auto' });
            }
            if (!ej2_base_4.isNullOrUndefined(this.bdrLine)) {
                this.bdrLine.classList.remove(CLS_HIDDEN);
            }
        };
        Tab.prototype.setActive = function (value) {
            this.tbItem = ej2_base_4.selectAll('.' + CLS_HEADER + ' .' + CLS_TB_ITEM, this.element);
            var trg = this.tbItem[value];
            if (value >= 0) {
                this.setProperties({ selectedItem: value }, true);
            }
            if (value < 0 || isNaN(value) || this.tbItem.length === 0) {
                return;
            }
            if (trg.classList.contains(CLS_ACTIVE)) {
                this.setActiveBorder();
                return;
            }
            if (!this.isTemplate) {
                var prev = this.tbItem[this.prevIndex];
                if (!ej2_base_4.isNullOrUndefined(prev)) {
                    prev.removeAttribute('aria-controls');
                }
                ej2_base_1.attributes(trg, { 'aria-controls': CLS_CONTENT + '_' + value });
            }
            var id = trg.id;
            this.removeActiveClass(id);
            trg.classList.add(CLS_ACTIVE);
            trg.setAttribute('aria-selected', 'true');
            var no = Number(this.extIndex(id));
            ej2_base_1.attributes(this.element, { 'aria-activedescendant': id });
            if (this.isTemplate) {
                if (ej2_base_2.select('.' + CLS_CONTENT, this.element).children.length > 0) {
                    var trg_1 = this.findEle(ej2_base_2.select('.e-content', this.element).children, CLS_CONTENT + '_' + no);
                    if (!ej2_base_4.isNullOrUndefined(trg_1)) {
                        trg_1.classList.add(CLS_ACTIVE);
                    }
                    this.triggerAnimation(id, this.enableAnimation);
                }
            }
            else {
                var item = ej2_base_2.select('.' + CLS_CONTENT + ' > #' + CLS_CONTENT + '_' + this.extIndex(id), this.element);
                if (ej2_base_4.isNullOrUndefined(item)) {
                    this.cntEle.appendChild(ej2_base_4.createElement('div', {
                        id: CLS_CONTENT + '_' + this.extIndex(id), className: CLS_ITEM + ' ' + CLS_ACTIVE,
                        attrs: { role: 'tabpanel', 'aria-labelledby': CLS_ITEM + '_' + this.extIndex(id) }
                    }));
                    var eleTrg = ej2_base_2.select('.' + CLS_CONTENT + ' > #' + CLS_CONTENT + '_' + this.extIndex(id), this.element);
                    this.getContent(eleTrg, Number(this.extIndex(id)), 'render');
                }
                else {
                    item.classList.add(CLS_ACTIVE);
                }
                this.triggerAnimation(id, this.enableAnimation);
            }
            this.setActiveBorder();
            var curActItem = ej2_base_2.select('.' + CLS_HEADER + ' #' + id, this.element);
            this.refreshItemVisibility(curActItem);
            curActItem.firstChild.focus();
            var eventArg = {
                previousItem: this.prevItem,
                previousIndex: this.prevIndex,
                selectedItem: trg,
                selectedIndex: value,
                isSwiped: this.isSwipeed
            };
            this.trigger('selected', eventArg);
        };
        Tab.prototype.setItems = function (items) {
            this.isReplace = true;
            this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
            this.tbObj.items = this.parseObject(items, 0);
            this.tbObj.dataBind();
            this.isReplace = false;
        };
        Tab.prototype.setRTL = function (value) {
            this.tbObj.enableRtl = value;
            this.tbObj.dataBind();
            this.setCssClass(this.element, CLS_RTL, value);
            this.refreshActiveBorder();
        };
        Tab.prototype.refreshActiveBorder = function () {
            if (!ej2_base_4.isNullOrUndefined(this.bdrLine)) {
                this.bdrLine.classList.add(CLS_HIDDEN);
            }
            this.setActiveBorder();
        };
        Tab.prototype.wireEvents = function () {
            window.addEventListener('resize', this.refreshActElePosition.bind(this));
            ej2_base_5.EventHandler.add(this.element, 'mouseover', this.hoverHandler, this);
            ej2_base_5.EventHandler.add(this.element, 'keydown', this.spaceKeyDown, this);
            if (!ej2_base_4.isNullOrUndefined(this.cntEle)) {
                this.touchModule = new ej2_base_5.Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
            }
            this.keyModule = new ej2_base_3.KeyboardEvents(this.element, { keyAction: this.keyHandler.bind(this), keyConfigs: this.keyConfigs });
            this.tabKeyModule = new ej2_base_3.KeyboardEvents(this.element, {
                keyAction: this.keyHandler.bind(this),
                keyConfigs: { openPopup: 'shift+f10', tab: 'tab', shiftTab: 'shift+tab' },
                eventName: 'keydown'
            });
        };
        Tab.prototype.unWireEvents = function () {
            this.keyModule.destroy();
            this.tabKeyModule.destroy();
            if (!ej2_base_4.isNullOrUndefined(this.cntEle)) {
                this.touchModule.destroy();
            }
            window.removeEventListener('resize', this.refreshActElePosition.bind(this));
            this.element.removeEventListener('mouseover', this.hoverHandler.bind(this));
        };
        Tab.prototype.clickHandler = function (args) {
            this.element.classList.remove(CLS_FOCUS);
            var trg = args.originalEvent.target;
            var trgParent = ej2_base_1.closest(trg, '.' + CLS_TB_ITEM);
            var trgIndex = this.getEleIndex(trgParent);
            if (trg.classList.contains(CLS_ICON_CLOSE)) {
                this.removeTab(trgIndex);
            }
            else {
                this.isPopup = false;
                if (!ej2_base_4.isNullOrUndefined(trgParent) && trgIndex !== this.selectedItem) {
                    this.select(trgIndex);
                }
            }
        };
        Tab.prototype.swipeHandler = function (e) {
            if (e.velocity < 3 && ej2_base_4.isNullOrUndefined(e.originalEvent.changedTouches)) {
                return;
            }
            this.isSwipeed = true;
            if (e.swipeDirection === 'Right') {
                this.select(this.selectedItem - 1);
            }
            else {
                if (e.swipeDirection === 'Left' && (this.selectedItem !== ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element).length - 1)) {
                    this.select(this.selectedItem + 1);
                }
            }
            this.isSwipeed = false;
        };
        Tab.prototype.spaceKeyDown = function (e) {
            if ((e.keyCode === 32 && e.which === 32) || (e.keyCode === 35 && e.which === 35)) {
                var clstHead = ej2_base_1.closest(e.target, '.' + CLS_HEADER);
                if (!ej2_base_4.isNullOrUndefined(clstHead)) {
                    e.preventDefault();
                }
            }
        };
        Tab.prototype.keyHandler = function (e) {
            if (this.element.classList.contains(CLS_DISABLE)) {
                return;
            }
            this.element.classList.add(CLS_FOCUS);
            var trg = e.target;
            var actEle = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_ACTIVE, this.element);
            var tabItem = ej2_base_4.selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', this.element);
            this.popEle = ej2_base_2.select('.' + CLS_TB_POP, this.element);
            if (!ej2_base_4.isNullOrUndefined(this.popEle)) {
                this.popObj = this.popEle.ej2_instances[0];
            }
            switch (e.action) {
                case 'space':
                case 'enter':
                    if (trg.parentElement.classList.contains(CLS_DISABLE)) {
                        return;
                    }
                    if (e.action === 'enter' && trg.classList.contains('e-hor-nav')) {
                        break;
                    }
                    this.keyPressed(trg);
                    break;
                case 'tab':
                case 'shiftTab':
                    if (trg.classList.contains(CLS_WRAP)
                        && ej2_base_1.closest(trg, '.' + CLS_TB_ITEM).classList.contains(CLS_ACTIVE) === false) {
                        trg.setAttribute('tabindex', '-1');
                    }
                    if (this.popObj && ej2_base_2.isVisible(this.popObj.element)) {
                        this.popObj.hide(this.hide);
                    }
                    actEle.children.item(0).setAttribute('tabindex', '0');
                    break;
                case 'moveLeft':
                case 'moveRight':
                    var item = ej2_base_1.closest(document.activeElement, '.' + CLS_TB_ITEM);
                    if (!ej2_base_4.isNullOrUndefined(item)) {
                        this.refreshItemVisibility(item);
                    }
                    break;
                case 'openPopup':
                    e.preventDefault();
                    if (!ej2_base_4.isNullOrUndefined(this.popEle) && this.popEle.classList.contains(CLS_POPUP_CLOSE)) {
                        this.popObj.show(this.show);
                    }
                    break;
                case 'delete':
                    var trgParent = ej2_base_1.closest(trg, '.' + CLS_TB_ITEM);
                    if (this.showCloseButton === true && !ej2_base_4.isNullOrUndefined(trgParent)) {
                        var nxtSib = trgParent.nextSibling;
                        if (!ej2_base_4.isNullOrUndefined(nxtSib) && nxtSib.classList.contains(CLS_TB_ITEM)) {
                            nxtSib.firstChild.focus();
                        }
                        this.removeTab(this.getEleIndex(trgParent));
                    }
                    this.setActiveBorder();
                    break;
            }
        };
        Tab.prototype.refreshActElePosition = function () {
            var activeEle = ej2_base_2.select('.' + CLS_TB_ITEM + '.' + CLS_TB_POPUP + '.' + CLS_ACTIVE, this.element);
            if (!ej2_base_4.isNullOrUndefined(activeEle)) {
                this.select(this.getEleIndex(activeEle));
            }
            this.refreshActiveBorder();
        };
        Tab.prototype.refreshItemVisibility = function (target) {
            var scrCnt = ej2_base_2.select('.e-hscroll-content', this.tbItems);
            if (!ej2_base_4.isNullOrUndefined(scrCnt)) {
                var scrBar = ej2_base_2.select('.e-hscroll-bar', this.tbItems);
                var scrStart = scrBar.scrollLeft;
                var scrEnd = scrStart + scrBar.offsetWidth;
                var eleStart = target.offsetLeft;
                var eleWidth = target.offsetWidth;
                var eleEnd = target.offsetLeft + target.offsetWidth;
                if ((scrStart < eleStart) && (scrEnd < eleEnd)) {
                    var eleViewRange = scrEnd - eleStart;
                    scrBar.scrollLeft = scrStart + (eleWidth - eleViewRange);
                }
                else {
                    if ((scrStart > eleStart) && (scrEnd > eleEnd)) {
                        var eleViewRange = eleEnd - scrStart;
                        scrBar.scrollLeft = scrStart - (eleWidth - eleViewRange);
                    }
                }
            }
            else {
                return;
            }
        };
        Tab.prototype.hoverHandler = function (e) {
            var trg = e.target;
            if (!ej2_base_4.isNullOrUndefined(trg.classList) && trg.classList.contains(CLS_ICON_CLOSE)) {
                trg.setAttribute('title', new ej2_base_3.L10n('tab', { title: this.title }, this.locale).getConstant('title'));
            }
        };
        Tab.prototype.enableTab = function (index, value) {
            var tbItems = ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element)[index];
            if (ej2_base_4.isNullOrUndefined(tbItems)) {
                return;
            }
            if (value === true) {
                tbItems.classList.remove(CLS_DISABLE);
                tbItems.firstChild.setAttribute('tabindex', '-1');
            }
            else {
                tbItems.classList.add(CLS_DISABLE);
                tbItems.firstChild.removeAttribute('tabindex');
                if (tbItems.classList.contains(CLS_ACTIVE)) {
                    this.select(index + 1);
                }
            }
            tbItems.setAttribute('aria-disabled', (value === true) ? 'false' : 'true');
        };
        Tab.prototype.addTab = function (items, index) {
            var _this = this;
            this.trigger('adding', { addedItems: items });
            if (ej2_base_4.isNullOrUndefined(index)) {
                index = ej2_base_4.selectAll('.' + CLS_TB_ITEM).length - 1;
            }
            if (this.isTemplate === true || ej2_base_4.selectAll('.' + CLS_TB_ITEM).length - 1 < index || index < 0 || isNaN(index)) {
                return;
            }
            this.bdrLine.classList.add(CLS_HIDDEN);
            this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
            var tabItems = this.parseObject(items, index);
            items.forEach(function (item, place) {
                if (_this.isReplace === true) {
                    var hdrItem = ej2_base_2.select('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM + '_' + index, _this.element);
                    ej2_base_1.detach(hdrItem);
                    _this.items.splice((index + place), 0, item);
                }
                else {
                    _this.items.push(item);
                }
            });
            this.tbObj.addItems(tabItems, index);
            this.trigger('added', { addedItems: items });
            if (this.selectedItem === index) {
                this.select(index);
            }
            else {
                this.setActiveBorder();
            }
        };
        Tab.prototype.removeTab = function (index) {
            var trg = ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element)[index];
            var removingArgs = { removedItem: trg, removedIndex: index };
            this.trigger('removing', removingArgs);
            if (ej2_base_4.isNullOrUndefined(trg)) {
                return;
            }
            this.tbObj.removeItems(index);
            this.refreshActiveBorder();
            var no = this.extIndex(trg.id);
            var cntTrg = this.findEle(ej2_base_2.select('.e-content', this.element).children, CLS_CONTENT + '_' + no);
            if (!ej2_base_4.isNullOrUndefined(cntTrg)) {
                cntTrg.outerHTML = '';
            }
            var removedArgs = { removedItem: trg, removedIndex: index };
            this.trigger('removed', removedArgs);
            if (trg.classList.contains(CLS_ACTIVE)) {
                index = (index > ej2_base_4.selectAll('.' + CLS_TB_ITEM + ':not(.' + CLS_TB_POPUP + ')', this.element).length - 1) ? index - 1 : index;
                this.enableAnimation = false;
                this.select(index);
            }
            if (ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element).length === 0) {
                this.hdrEle.style.display = 'none';
            }
            this.enableAnimation = true;
        };
        Tab.prototype.hideTab = function (index, value) {
            var item = ej2_base_4.selectAll('.' + CLS_TB_ITEM, this.element)[index];
            if (ej2_base_4.isNullOrUndefined(item)) {
                return;
            }
            if (ej2_base_4.isNullOrUndefined(value)) {
                value = true;
            }
            this.bdrLine.classList.add(CLS_HIDDEN);
            if (value === true) {
                item.classList.add(CLS_HIDDEN);
                if (item.classList.contains(CLS_ACTIVE)) {
                    this.select((index !== 0) ? index - 1 : index + 1);
                }
            }
            else {
                item.classList.remove(CLS_HIDDEN);
            }
            this.setActiveBorder();
            item.setAttribute('aria-hidden', '' + value);
        };
        Tab.prototype.select = function (args) {
            this.tbItems = ej2_base_2.select('.' + CLS_HEADER + ' .' + CLS_TB_ITEMS, this.element);
            this.tbItem = ej2_base_4.selectAll('.' + CLS_HEADER + ' .' + CLS_TB_ITEM, this.element);
            this.prevItem = this.tbItem[this.prevIndex];
            if (!ej2_base_4.isNullOrUndefined(this.prevItem) && !this.prevItem.classList.contains(CLS_DISABLE)) {
                this.prevItem.children.item(0).setAttribute('tabindex', '-1');
            }
            var eventArg = {
                previousItem: this.prevItem,
                previousIndex: this.prevIndex,
                selectedItem: this.tbItem[this.selectedItem],
                selectedIndex: this.selectedItem,
                isSwiped: this.isSwipeed
            };
            this.trigger('selecting', eventArg);
            if (eventArg.cancel) {
                return;
            }
            if (typeof args === 'number') {
                if (!ej2_base_4.isNullOrUndefined(this.tbItem[args]) && this.tbItem[args].classList.contains(CLS_DISABLE)) {
                    for (var i = args + 1; i < this.items.length; i++) {
                        if (this.items[i].disabled === false) {
                            args = i;
                            break;
                        }
                        else {
                            args = 0;
                        }
                    }
                }
                if (this.tbItem.length > args && args >= 0 && !isNaN(args)) {
                    this.prevIndex = this.selectedItem;
                    if (this.tbItem[args].classList.contains(CLS_TB_POPUP)) {
                        this.setActive(this.popupHandler(this.tbItem[args]));
                    }
                    else {
                        this.setActive(args);
                    }
                }
                else {
                    this.setActive(0);
                }
            }
            else if (args instanceof (HTMLElement)) {
                this.setActive(this.getEleIndex(args));
            }
        };
        Tab.prototype.disable = function (value) {
            this.setCssClass(this.element, CLS_DISABLE, value);
            this.element.setAttribute('aria-disabled', '' + value);
        };
        Tab.prototype.getPersistData = function () {
            return this.addOnPersist(['selectedItem', 'actEleId']);
        };
        Tab.prototype.getModuleName = function () {
            return 'tab';
        };
        Tab.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'width':
                        ej2_base_4.setStyleAttribute(this.element, { width: ej2_base_3.formatUnit(newProp.width) });
                        break;
                    case 'height':
                        ej2_base_4.setStyleAttribute(this.element, { height: ej2_base_3.formatUnit(newProp.height) });
                        this.setContentHeight(false);
                        break;
                    case 'cssClass':
                        this.setCssClass(this.element, newProp.cssClass, true);
                        break;
                    case 'items':
                        if (!(newProp.items instanceof Array && oldProp.items instanceof Array)) {
                            var changedProp = Object.keys(newProp.items);
                            for (var i = 0; i < changedProp.length; i++) {
                                var index = parseInt(Object.keys(newProp.items)[i], 10);
                                var property = Object.keys(newProp.items[index])[0];
                                var oldVal = Object(oldProp.items[index])[property];
                                var newVal = Object(newProp.items[index])[property];
                                var hdrItem = ej2_base_2.select('.' + CLS_TB_ITEMS + ' #' + CLS_ITEM + '_' + index, this.element);
                                var cntItem = ej2_base_2.select('.' + CLS_CONTENT + ' #' + CLS_CONTENT + '_' + index, this.element);
                                if (property === 'header') {
                                    var arr = [];
                                    arr.push(this.items[index]);
                                    this.items.splice(index, 1);
                                    this.tbObj.items.splice(index, 1);
                                    this.isReplace = true;
                                    this.addTab(arr, index);
                                    this.isReplace = false;
                                }
                                if (property === 'content') {
                                    if (!ej2_base_4.isNullOrUndefined(cntItem)) {
                                        (cntItem.classList.contains('e-active') ? (cntItem.innerHTML = newVal) : cntItem.remove());
                                    }
                                }
                                if (property === 'cssClass') {
                                    if (!ej2_base_4.isNullOrUndefined(hdrItem)) {
                                        hdrItem.classList.remove(oldVal);
                                        hdrItem.classList.add(newVal);
                                    }
                                    if (!ej2_base_4.isNullOrUndefined(cntItem)) {
                                        cntItem.classList.remove(oldVal);
                                        cntItem.classList.add(newVal);
                                    }
                                }
                                if (property === 'disabled') {
                                    this.enableTab(index, ((newVal === true) ? false : true));
                                }
                            }
                        }
                        else {
                            if (ej2_base_4.isNullOrUndefined(this.tbObj)) {
                                this.renderContainer();
                                if (!ej2_base_4.isNullOrUndefined(this.cntEle)) {
                                    this.touchModule = new ej2_base_5.Touch(this.cntEle, { swipe: this.swipeHandler.bind(this) });
                                }
                            }
                            else {
                                this.setItems(newProp.items);
                                ej2_base_2.select('.' + CLS_TAB + ' > .' + CLS_CONTENT, this.element).innerHTML = '';
                                this.select(this.selectedItem);
                            }
                        }
                        break;
                    case 'showCloseButton':
                        this.setCloseButton(newProp.showCloseButton);
                        break;
                    case 'selectedItem':
                        this.selectedItem = oldProp.selectedItem;
                        this.select(newProp.selectedItem);
                        break;
                    case 'headerPlacement':
                        var tempHdrEle = ej2_base_2.select('.' + CLS_HEADER, this.element);
                        this.setOrientation(newProp.headerPlacement, tempHdrEle);
                        this.select(this.selectedItem);
                        break;
                    case 'enableRtl':
                        this.setRTL(newProp.enableRtl);
                        break;
                    case 'overflowMode':
                        this.tbObj.overflowMode = newProp.overflowMode;
                        this.tbObj.dataBind();
                        this.refreshActElePosition();
                        break;
                    case 'heightAdjustMode':
                        this.setContentHeight(false);
                        this.select(this.selectedItem);
                        break;
                }
            }
        };
        __decorate([
            ej2_base_1.Collection([], TabItem)
        ], Tab.prototype, "items", void 0);
        __decorate([
            ej2_base_1.Property('100%')
        ], Tab.prototype, "width", void 0);
        __decorate([
            ej2_base_1.Property('auto')
        ], Tab.prototype, "height", void 0);
        __decorate([
            ej2_base_1.Property('')
        ], Tab.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_1.Property(0)
        ], Tab.prototype, "selectedItem", void 0);
        __decorate([
            ej2_base_1.Property('Top')
        ], Tab.prototype, "headerPlacement", void 0);
        __decorate([
            ej2_base_1.Property('Content')
        ], Tab.prototype, "heightAdjustMode", void 0);
        __decorate([
            ej2_base_1.Property('Scrollable')
        ], Tab.prototype, "overflowMode", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], Tab.prototype, "enableRtl", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], Tab.prototype, "showCloseButton", void 0);
        __decorate([
            ej2_base_1.Complex({}, TabAnimationSettings)
        ], Tab.prototype, "animation", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "created", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "adding", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "added", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "selecting", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "selected", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "removing", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "removed", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Tab.prototype, "destroyed", void 0);
        Tab = __decorate([
            ej2_base_2.NotifyPropertyChanges
        ], Tab);
        return Tab;
    }(ej2_base_1.Component));
    exports.Tab = Tab;
});
