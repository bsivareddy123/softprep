var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CONTROL = 'e-control';
    var ROOT = 'e-sidebar';
    var DOCKER = 'e-dock';
    var CLOSE = 'e-close';
    var OPEN = 'e-open';
    var TRASITION = 'e-transition';
    var DEFAULTBACKDROP = 'e-sidebar-overlay';
    var CONTEXTBACKDROP = 'e-backdrop';
    var RTL = 'e-rtl';
    var RIGHT = 'e-right';
    var LEFT = 'e-left';
    var OVER = 'e-over';
    var PUSH = 'e-push';
    var SLIDE = 'e-slide';
    var VISIBILITY = 'e-visibility';
    var MAINCONTENTANIMATION = 'e-content-animation';
    var DISABLEANIMATION = 'e-disable-animation';
    var CONTEXT = 'e-sidebar-context';
    var SIDEBARABSOLUTE = 'e-sidebar-absolute';
    var Sidebar = (function (_super) {
        __extends(Sidebar, _super);
        function Sidebar(options, element) {
            return _super.call(this, options, element) || this;
        }
        Sidebar.prototype.preRender = function () {
            this.setWidth();
        };
        Sidebar.prototype.render = function () {
            this.initialize();
            this.wireEvents();
        };
        Sidebar.prototype.initialize = function () {
            this.setContext();
            this.addClass();
            this.setZindex();
            if (this.enableDock) {
                this.setDock();
            }
            this.setMediaQuery();
            this.setType(this.type);
        };
        Sidebar.prototype.setContext = function () {
            if (this.contextTo) {
                this.contextTo.insertAdjacentElement('afterbegin', this.element);
                ej2_base_3.addClass([this.element], SIDEBARABSOLUTE);
                ej2_base_3.addClass([this.contextTo], CONTEXT);
            }
        };
        Sidebar.prototype.setWidth = function () {
            if (this.enableDock && this.position === 'Left') {
                ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.dockSize) });
            }
            else if (this.enableDock && this.position === 'Right') {
                ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.dockSize) });
            }
            else if (!this.enableDock) {
                ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.width) });
            }
        };
        Sidebar.prototype.setZindex = function () {
            ej2_base_3.setStyleAttribute(this.element, { 'z-index': '' + this.zIndex });
        };
        Sidebar.prototype.addClass = function () {
            var classELement = document.querySelector('.e-main-content');
            if (!ej2_base_1.isNullOrUndefined((classELement ||
                this.element.nextElementSibling))) {
                ej2_base_3.addClass([classELement || this.element.nextElementSibling], [MAINCONTENTANIMATION]);
            }
            if (!this.enableDock && this.type !== 'Auto') {
                ej2_base_3.addClass([this.element], [VISIBILITY]);
            }
            ej2_base_3.removeClass([this.element], [OPEN, CLOSE, RIGHT, LEFT, SLIDE, PUSH, OVER]);
            this.element.classList.add(ROOT);
            ej2_base_3.addClass([this.element], (this.position === 'Right') ? RIGHT : LEFT);
            if (this.type === 'Auto' && !ej2_base_2.Browser.isDevice && !this.enableDock) {
                ej2_base_3.addClass([this.element], OPEN);
            }
            else {
                ej2_base_3.addClass([this.element], CLOSE);
            }
        };
        Sidebar.prototype.destroyBackDrop = function () {
            var sibling = document.querySelector('.e-main-content') ||
                this.element.nextElementSibling;
            if (this.contextTo && this.showBackdrop && sibling) {
                ej2_base_3.removeClass([sibling], CONTEXTBACKDROP);
            }
            else if (this.showBackdrop && this.modal) {
                this.modal.style.display = 'none';
                this.modal.outerHTML = '';
                this.modal = null;
            }
        };
        Sidebar.prototype.hide = function () {
            if (this.element.classList.contains(CLOSE)) {
                return;
            }
            if (this.element.classList.contains(OPEN)) {
                this.eventArguments = { name: 'change', element: this.element };
                this.trigger('change', this.eventArguments);
            }
            ej2_base_3.addClass([this.element], CLOSE);
            ej2_base_3.removeClass([this.element], OPEN);
            this.enableDock ? ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.dockSize) }) :
                ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.width) });
            this.setDock();
            this.setType(this.type);
            var sibling = document.querySelector('.e-main-content') ||
                this.element.nextElementSibling;
            if (!this.enableDock && sibling) {
                sibling.style.transform = 'translateX(' + 0 + 'px)';
                this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
            }
            this.eventArguments = { name: 'change', element: this.element };
            this.trigger('close', this.eventArguments);
            this.destroyBackDrop();
            if (this.closeOnDocumentClick) {
                ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);
            }
            this.setAnimation();
            if (this.type === 'Slide') {
                document.body.classList.remove('e-sidebar-overflow');
            }
        };
        Sidebar.prototype.show = function () {
            ej2_base_3.removeClass([this.element], VISIBILITY);
            if (this.element.classList.contains(OPEN)) {
                return;
            }
            if (this.element.classList.contains(CLOSE)) {
                this.eventArguments = { name: 'open', element: this.element };
                this.trigger('change', this.eventArguments);
            }
            ej2_base_3.addClass([this.element], [OPEN, TRASITION]);
            ej2_base_3.setStyleAttribute(this.element, { 'transform': '' });
            ej2_base_3.removeClass([this.element], CLOSE);
            ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.width) });
            var elementWidth = this.element.getBoundingClientRect().width;
            this.setType(this.type);
            this.createBackDrop();
            this.eventArguments.name = 'open';
            this.eventArguments.element = this.element;
            this.trigger('open', this.eventArguments);
            if (this.closeOnDocumentClick) {
                ej2_base_1.EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);
            }
            this.setAnimation();
            if (this.type === 'Slide') {
                document.body.classList.add('e-sidebar-overflow');
            }
        };
        Sidebar.prototype.setAnimation = function () {
            if (this.animate) {
                ej2_base_3.removeClass([this.element], DISABLEANIMATION);
            }
            else {
                ej2_base_3.addClass([this.element], DISABLEANIMATION);
            }
        };
        Sidebar.prototype.setDock = function () {
            if (this.enableDock && this.position === 'Left' && !this.isOpen()) {
                ej2_base_3.setStyleAttribute(this.element, { 'transform': 'translateX(' + -100 + '%) translateX(' + ej2_base_1.formatUnit(this.dockSize) + ')' });
            }
            else if (this.enableDock && this.position === 'Right' && !this.isOpen()) {
                ej2_base_3.setStyleAttribute(this.element, { 'transform': 'translateX(' + 100 + '%) translateX(' + '-' + ej2_base_1.formatUnit(this.dockSize) + ')' });
            }
            if (this.element.classList.contains(CLOSE) && this.enableDock) {
                ej2_base_3.setStyleAttribute(this.element, { 'width': ej2_base_1.formatUnit(this.dockSize) });
            }
        };
        Sidebar.prototype.createBackDrop = function () {
            if (this.contextTo && this.showBackdrop) {
                var sibling = document.querySelector('.e-main-content') ||
                    this.element.nextElementSibling;
                ej2_base_3.addClass([sibling], CONTEXTBACKDROP);
            }
            else if (this.showBackdrop && !this.modal && this.isOpen()) {
                this.modal = ej2_base_3.createElement('div');
                this.modal.className = DEFAULTBACKDROP;
                this.modal.style.display = 'block';
                document.body.appendChild(this.modal);
            }
        };
        Sidebar.prototype.getPersistData = function () {
            return this.addOnPersist(['type', 'position']);
        };
        Sidebar.prototype.getModuleName = function () {
            return 'sidebar';
        };
        Sidebar.prototype.toggle = function (e) {
            this.element.classList.contains(OPEN) ? this.hide() : this.show();
        };
        Sidebar.prototype.isOpen = function () {
            return this.element.classList.contains(OPEN) ? true : false;
        };
        Sidebar.prototype.setMediaQuery = function () {
            if (this.mediaQuery && this.mediaQuery.matches) {
                this.show();
            }
            else if (this.mediaQuery && this.isOpen()) {
                this.hide();
            }
        };
        Sidebar.prototype.resize = function (e) {
            if (this.type === 'Auto') {
                if (ej2_base_2.Browser.isDevice) {
                    ej2_base_3.addClass([this.element], OVER);
                }
                else {
                    ej2_base_3.addClass([this.element], PUSH);
                }
            }
            this.setMediaQuery();
        };
        Sidebar.prototype.documentclickHandler = function (e) {
            if (e.target.closest('.' + CONTROL + '' + '.' + ROOT)) {
                return;
            }
            this.hide();
        };
        Sidebar.prototype.enableGestureHandler = function (args) {
            if (this.position === 'Left' && args.swipeDirection === 'Right' &&
                (args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
                this.show();
            }
            else if (this.position === 'Left' && args.swipeDirection === 'Left') {
                this.hide();
            }
            else if (this.position === 'Right' && args.swipeDirection === 'Right') {
                this.hide();
            }
            else if (this.position === 'Right' && args.swipeDirection === 'Left'
                && (window.innerWidth - args.startX <= 20 && args.distanceX >= 50 && args.velocity >= 0.5)) {
                this.show();
            }
        };
        Sidebar.prototype.setEnableGestures = function () {
            if (this.enableGestures) {
                this.mainContentEle = new ej2_base_3.Touch(document.body, { swipe: this.enableGestureHandler.bind(this) });
                this.sidebarEle = new ej2_base_3.Touch(this.element, { swipe: this.enableGestureHandler.bind(this) });
            }
            else {
                if (this.mainContentEle && this.sidebarEle) {
                    this.mainContentEle.destroy();
                    this.sidebarEle.destroy();
                }
            }
        };
        Sidebar.prototype.wireEvents = function () {
            this.setEnableGestures();
            window.addEventListener('resize', this.resize.bind(this));
        };
        Sidebar.prototype.unWireEvents = function () {
            window.removeEventListener('resize', this.resize.bind(this));
            ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);
            if (this.mainContentEle) {
                this.mainContentEle.destroy();
            }
            if (this.sidebarEle) {
                this.sidebarEle.destroy();
            }
        };
        Sidebar.prototype.onPropertyChanged = function (newProp, oldProp) {
            var sibling = document.querySelector('.e-main-content') ||
                this.element.nextElementSibling;
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'width':
                        this.setWidth();
                        if (!this.isOpen()) {
                            this.setDock();
                        }
                        break;
                    case 'animate':
                        this.setAnimation();
                        break;
                    case 'type':
                        ej2_base_3.removeClass([this.element], [VISIBILITY]);
                        this.addClass();
                        this.setType(this.type);
                        break;
                    case 'position':
                        this.element.style.transform = '';
                        this.setDock();
                        if (sibling) {
                            this.position === 'Left' ? sibling.style.marginRight = '0px' : sibling.style.marginLeft = '0px';
                        }
                        if (this.position === 'Right') {
                            ej2_base_3.removeClass([this.element], LEFT);
                            ej2_base_3.addClass([this.element], RIGHT);
                        }
                        else {
                            ej2_base_3.removeClass([this.element], RIGHT);
                            ej2_base_3.addClass([this.element], LEFT);
                        }
                        this.setType(this.type);
                        break;
                    case 'showBackdrop':
                        if (this.showBackdrop) {
                            this.createBackDrop();
                        }
                        else {
                            if (this.modal) {
                                this.modal.style.display = 'none';
                                this.modal.outerHTML = '';
                                this.modal = null;
                            }
                        }
                        break;
                    case 'contextTo':
                        if (ej2_base_1.isNullOrUndefined(this.contextTo)) {
                            ej2_base_3.removeClass([this.element], SIDEBARABSOLUTE);
                            ej2_base_3.removeClass([oldProp.contextTo], CONTEXT);
                            ej2_base_3.setStyleAttribute(sibling, { 'margin-left': 0, 'margin-right': 0 });
                            document.body.insertAdjacentElement('afterbegin', this.element);
                        }
                        else {
                            _super.prototype.refresh.call(this);
                        }
                        break;
                    case 'closeOnDocumentClick':
                        if (this.closeOnDocumentClick) {
                            ej2_base_1.EventHandler.add(document, 'mousedown touchstart', this.documentclickHandler, this);
                        }
                        else {
                            ej2_base_1.EventHandler.remove(document, 'mousedown touchstart', this.documentclickHandler);
                        }
                        break;
                    case 'enableDock':
                        if (!this.isOpen()) {
                            this.setDock();
                        }
                        break;
                    case 'zIndex':
                        this.setZindex();
                        break;
                    case 'mediaQuery':
                        this.setMediaQuery();
                        break;
                    case 'enableGestures':
                        this.setEnableGestures();
                        break;
                }
            }
        };
        Sidebar.prototype.setType = function (type) {
            var elementWidth = this.element.getBoundingClientRect().width;
            this.setZindex();
            if (this.enableDock) {
                ej2_base_3.addClass([this.element], DOCKER);
            }
            var sibling = document.querySelector('.e-main-content') ||
                this.element.nextElementSibling;
            if (sibling) {
                sibling.style.transform = 'translateX(' + 0 + 'px)';
                if (!ej2_base_2.Browser.isDevice && this.type !== 'Auto') {
                    this.position === 'Left' ? sibling.style.marginLeft = '0px' : sibling.style.marginRight = '0px';
                }
            }
            var margin = this.position === 'Left' ? elementWidth + 'px' : elementWidth + 'px';
            var eleWidth = this.position === 'Left' ? elementWidth : -(elementWidth);
            ej2_base_3.removeClass([this.element], [PUSH, OVER, SLIDE]);
            switch (type) {
                case 'Push':
                    ej2_base_3.addClass([this.element], [PUSH]);
                    if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                        this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                    }
                    break;
                case 'Slide':
                    ej2_base_3.addClass([this.element], [SLIDE]);
                    if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                        sibling.style.transform = 'translateX(' + eleWidth + 'px)';
                    }
                    break;
                case 'Over':
                    ej2_base_3.addClass([this.element], [OVER]);
                    if (this.enableDock && this.element.classList.contains(CLOSE)) {
                        if (sibling) {
                            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                        }
                    }
                    break;
                case 'Auto':
                    ej2_base_3.addClass([this.element], [TRASITION]);
                    if (ej2_base_2.Browser.isDevice) {
                        if (sibling && (this.enableDock) && !this.isOpen()) {
                            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                            ej2_base_3.addClass([this.element], PUSH);
                        }
                        else {
                            ej2_base_3.addClass([this.element], OVER);
                        }
                    }
                    else {
                        ej2_base_3.addClass([this.element], PUSH);
                        if (sibling && (this.enableDock || this.element.classList.contains(OPEN))) {
                            this.position === 'Left' ? sibling.style.marginLeft = margin : sibling.style.marginRight = margin;
                        }
                    }
                    this.createBackDrop();
            }
        };
        Sidebar.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            ej2_base_3.removeClass([this.element], [OPEN, CLOSE, PUSH, SLIDE, OVER, LEFT, RIGHT, TRASITION]);
            if (this.contextTo) {
                ej2_base_3.removeClass([this.element], SIDEBARABSOLUTE);
                ej2_base_3.removeClass([this.contextTo], CONTEXT);
            }
            this.destroyBackDrop();
            this.element.style.width = '';
            this.element.style.zIndex = '';
            this.element.style.transform = '';
            var sibling = document.querySelector('.e-main-content')
                || this.element.nextElementSibling;
            if (!ej2_base_1.isNullOrUndefined(sibling)) {
                sibling.style.margin = '';
                sibling.style.transform = '';
            }
            this.unWireEvents();
        };
        __decorate([
            ej2_base_2.Property('auto')
        ], Sidebar.prototype, "dockSize", void 0);
        __decorate([
            ej2_base_2.Property(null)
        ], Sidebar.prototype, "mediaQuery", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], Sidebar.prototype, "enableDock", void 0);
        __decorate([
            ej2_base_2.Property(true)
        ], Sidebar.prototype, "enableGestures", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], Sidebar.prototype, "enableRtl", void 0);
        __decorate([
            ej2_base_2.Property(true)
        ], Sidebar.prototype, "animate", void 0);
        __decorate([
            ej2_base_2.Property('auto')
        ], Sidebar.prototype, "height", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], Sidebar.prototype, "closeOnDocumentClick", void 0);
        __decorate([
            ej2_base_2.Property('Left')
        ], Sidebar.prototype, "position", void 0);
        __decorate([
            ej2_base_2.Property(null)
        ], Sidebar.prototype, "contextTo", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], Sidebar.prototype, "showBackdrop", void 0);
        __decorate([
            ej2_base_2.Property('Auto')
        ], Sidebar.prototype, "type", void 0);
        __decorate([
            ej2_base_2.Property('auto')
        ], Sidebar.prototype, "width", void 0);
        __decorate([
            ej2_base_2.Property(1000)
        ], Sidebar.prototype, "zIndex", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Sidebar.prototype, "created", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Sidebar.prototype, "close", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Sidebar.prototype, "open", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Sidebar.prototype, "change", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Sidebar.prototype, "destroyed", void 0);
        Sidebar = __decorate([
            ej2_base_2.NotifyPropertyChanges
        ], Sidebar);
        return Sidebar;
    }(ej2_base_1.Component));
    exports.Sidebar = Sidebar;
});
