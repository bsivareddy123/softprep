import { Component, formatUnit, EventHandler, Event, isNullOrUndefined } from '@syncfusion/ej2-base';import { Property, EmitType, NotifyPropertyChanges, INotifyPropertyChanged, Browser } from '@syncfusion/ej2-base';import { setStyleAttribute as setStyle, addClass, removeClass, createElement, Touch, SwipeEventArgs } from '@syncfusion/ej2-base';
import {SidebarPosition,SidebarType} from "./sidebar";
import {ComponentModel} from '@syncfusion/ej2-base';

/**
 * Interface for a class Sidebar
 */
export interface SidebarModel extends ComponentModel{

    /**
     * Specifies the size of the Sidebar in dock state.
     * @default 'auto'
     */
    dockSize?: string | number;

    /**
     * Specifies the media query whether the sidebar need to be opened when the resolution meets
     * @default null
     */
    mediaQuery?: MediaQueryList;

    /**
     * Specifies the docking state of the component.
     * @default false
     */
    enableDock?: boolean;

    /**
     * Enables the expand or collapse while swiping in touch devices.
     * @default true
     */
    enableGestures?: boolean;

    /**
     * Specifies the Sidebar in RTL state.
     * @default false
     */
    enableRtl?: boolean;

    /**
     * Specifies the Sidebar animation to be enabled or not.
     * @default true
     */
    animate?: boolean;

    /**
     * Specifies the height of the Sidebar.
     * @default 'auto'
     */
    height?: string | number;

    /**
     * Specifies whether the Sidebar need to be closed or not when document area is clicked.
     * @default false
     */
    closeOnDocumentClick?: boolean;

    /**
     * Specifies the position of the Sidebar (Left/Right) corresponding to the primary content.
     * @default 'Left'
     */
    position?: SidebarPosition;

    /**
     * Specifies the element position of the Sidebar inside any element.
     * @default null
     */
    contextTo?: HTMLElement;

    /**
     * Specifies the whether to apply overlay options to primary content when the Sidebar is in an open state.
     * @default false
     */
    showBackdrop?: boolean;

    /**
     * Specifies the expanding types of the Sidebar.
     * @default 'Auto'
     */
    type?: SidebarType;

    /**
     * Specifies the width of the Sidebar.
     * @default 'auto'
     */
    width?: string | number;

    /**
     * Specifies the z-index of the Sidebar.
     * @default 1000
     */
    zIndex?: string | number;

    /**
     * Triggers the event when component is created.
     * @event 
     */
    created?: EmitType<Event>;

    /**
     * Triggers when component is closed.
     *  @event 
     */
    close?: EmitType<Event>;

    /**
     * Triggers when component is opened.
     *  @event 
     */
    open?: EmitType<Event>;

    /**
     * Triggers when component is show or hide.
     *  @event 
     */
    change?: EmitType<Event>;

    /**
     * Triggers when component gets destroyed.
     *  @event 
     */
    destroyed?: EmitType<Event>;

}