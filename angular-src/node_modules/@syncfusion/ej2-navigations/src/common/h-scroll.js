var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base"], function (require, exports, ej2_base_1, ej2_base_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CLS_ROOT = 'e-hscroll';
    var CLS_RTL = 'e-rtl';
    var CLS_DISABLE = 'e-overlay';
    var CLS_HSCROLLBAR = 'e-hscroll-bar';
    var CLS_HSCROLLCON = 'e-hscroll-content';
    var CLS_NAVARROW = 'e-nav-arrow';
    var CLS_NAVRIGHTARROW = 'e-nav-right-arrow';
    var CLS_NAVLEFTARROW = 'e-nav-left-arrow';
    var CLS_HSCROLLNAV = 'e-scroll-nav';
    var CLS_HSCROLLNAVRIGHT = 'e-scroll-right-nav';
    var CLS_HSCROLLNAVLEFT = 'e-scroll-left-nav';
    var CLS_DEVICE = 'e-scroll-device';
    var HScroll = (function (_super) {
        __extends(HScroll, _super);
        function HScroll(options, element) {
            return _super.call(this, options, element) || this;
        }
        HScroll.prototype.preRender = function () {
            this.browser = ej2_base_2.Browser.info.name;
            this.browserCheck = this.browser === 'mozilla';
            this.isDevice = ej2_base_2.Browser.isDevice;
            var element = this.element;
            this.ieCheck = this.browser === 'edge' || this.browser === 'msie';
            this.initialize();
            if (element.id === '') {
                element.id = ej2_base_1.getUniqueID('hscroll');
                this.uniqueId = true;
            }
            element.style.display = 'block';
            if (this.enableRtl) {
                element.classList.add(CLS_RTL);
            }
        };
        HScroll.prototype.render = function () {
            this.touchModule = new ej2_base_1.Touch(this.element, { scroll: this.touchHandler.bind(this) });
            if (!this.isDevice) {
                this.createNavIcon(this.element);
                ej2_base_1.EventHandler.add(this.scrollEle, 'scroll', this.scrollHandler, this);
            }
            else {
                this.element.classList.add(CLS_DEVICE);
            }
        };
        HScroll.prototype.initialize = function () {
            var scrollEle = ej2_base_2.createElement('div', { className: CLS_HSCROLLCON });
            var scrollDiv = ej2_base_2.createElement('div', { className: CLS_HSCROLLBAR });
            scrollDiv.setAttribute('tabindex', '-1');
            var ele = this.element;
            var innerEle = [].slice.call(ele.children);
            for (var _i = 0, innerEle_1 = innerEle; _i < innerEle_1.length; _i++) {
                var ele_1 = innerEle_1[_i];
                scrollEle.appendChild(ele_1);
            }
            scrollDiv.appendChild(scrollEle);
            ele.appendChild(scrollDiv);
            scrollDiv.style.overflowX = 'hidden';
            this.scrollEle = scrollDiv;
            this.scrollItems = scrollEle;
        };
        HScroll.prototype.getPersistData = function () {
            var keyEntity = ['scrollStep'];
            return this.addOnPersist(keyEntity);
        };
        HScroll.prototype.getModuleName = function () {
            return 'hScroll';
        };
        HScroll.prototype.destroy = function () {
            var ele = this.element;
            ele.style.display = '';
            ele.classList.remove(CLS_ROOT);
            var nav = ej2_base_1.selectAll('#' + ele.id + '_nav.e-' + ele.id + '_nav');
            for (var _i = 0, _a = [].slice.call(this.scrollItems.children); _i < _a.length; _i++) {
                var elem = _a[_i];
                ele.appendChild(elem);
            }
            if (this.uniqueId) {
                this.element.removeAttribute('id');
            }
            ej2_base_2.detach(this.scrollEle);
            if (nav.length > 0) {
                ej2_base_2.detach(nav[0]);
                ej2_base_2.detach(nav[1]);
            }
            ej2_base_1.EventHandler.remove(this.scrollEle, 'scroll', this.scrollHandler);
            this.touchModule.destroy();
            this.touchModule = null;
            _super.prototype.destroy.call(this);
        };
        HScroll.prototype.createNavIcon = function (element) {
            var id = element.id.concat('_nav');
            var clsRight = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVRIGHT);
            var nav = ej2_base_2.createElement('div', { id: id, className: clsRight });
            nav.setAttribute('aria-disabled', 'false');
            var navItem = ej2_base_2.createElement('div', { className: CLS_NAVRIGHTARROW + ' ' + CLS_NAVARROW + ' e-icons' });
            var clsLeft = 'e-' + element.id.concat('_nav ' + CLS_HSCROLLNAV + ' ' + CLS_HSCROLLNAVLEFT);
            var navEle = ej2_base_2.createElement('div', { id: id, className: clsLeft + ' ' + CLS_DISABLE });
            navEle.setAttribute('aria-disabled', 'true');
            var navLeftItem = ej2_base_2.createElement('div', { className: CLS_NAVLEFTARROW + ' ' + CLS_NAVARROW + ' e-icons' });
            navEle.appendChild(navLeftItem);
            nav.appendChild(navItem);
            nav.setAttribute('tabindex', '0');
            element.appendChild(nav);
            element.insertBefore(navEle, element.firstChild);
            if (this.ieCheck) {
                nav.classList.add('e-ie-align');
                navEle.classList.add('e-ie-align');
            }
            this.eventBinding([nav, navEle]);
        };
        HScroll.prototype.onKeyPress = function (e) {
            var _this = this;
            if (e.key === 'Enter') {
                var timeoutFun_1 = function () {
                    _this.keyTimeout = true;
                    _this.eleScrolling(10, e.target);
                };
                this.keyTimer = window.setTimeout(function () {
                    timeoutFun_1();
                }, 100);
            }
        };
        HScroll.prototype.onKeyUp = function (e) {
            if (e.key !== 'Enter') {
                return;
            }
            if (this.keyTimeout) {
                this.keyTimeout = false;
            }
            else {
                e.target.click();
            }
            clearTimeout(this.keyTimer);
        };
        HScroll.prototype.eventBinding = function (ele) {
            var _this = this;
            ele.forEach(function (el) {
                new ej2_base_1.Touch(el, { tapHold: _this.tabHoldHandler.bind(_this), tapHoldThreshold: 500 });
                el.addEventListener('keydown', _this.onKeyPress.bind(_this));
                el.addEventListener('keyup', _this.onKeyUp.bind(_this));
                el.addEventListener('mouseup', _this.repeatScroll.bind(_this));
                el.addEventListener('touchend', _this.repeatScroll.bind(_this));
                el.addEventListener('contextmenu', function (e) {
                    e.preventDefault();
                });
                ej2_base_1.EventHandler.add(el, 'click', _this.clickEventHandler, _this);
            });
        };
        HScroll.prototype.repeatScroll = function () {
            clearInterval(this.timeout);
        };
        HScroll.prototype.tabHoldHandler = function (e) {
            var _this = this;
            var trgt = e.originalEvent.target;
            trgt = this.contains(trgt, CLS_HSCROLLNAV) ? trgt.firstElementChild : trgt;
            var scrollDis = 10;
            var timeoutFun = function () {
                _this.eleScrolling(scrollDis, trgt);
            };
            this.timeout = window.setInterval(function () {
                timeoutFun();
            }, 50);
        };
        HScroll.prototype.contains = function (ele, className) {
            return ele.classList.contains(className);
        };
        HScroll.prototype.eleScrolling = function (scrollDis, trgt) {
            var element = this.scrollEle;
            var rootEle = this.element;
            var classList = trgt.classList;
            if (classList.contains(CLS_HSCROLLNAV)) {
                classList = trgt.querySelector('.' + CLS_NAVARROW).classList;
            }
            if (this.contains(rootEle, CLS_RTL) && this.browserCheck) {
                scrollDis = -scrollDis;
            }
            var scrlLeft = element.scrollLeft;
            if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {
                if (classList.contains(CLS_NAVRIGHTARROW)) {
                    element.scrollLeft = scrlLeft + scrollDis;
                }
                else {
                    element.scrollLeft = scrlLeft - scrollDis;
                }
            }
            else {
                if (classList.contains(CLS_NAVLEFTARROW)) {
                    element.scrollLeft = scrlLeft + scrollDis;
                }
                else {
                    element.scrollLeft = scrlLeft - scrollDis;
                }
            }
        };
        HScroll.prototype.clickEventHandler = function (e) {
            this.eleScrolling(this.scrollStep, e.target);
        };
        HScroll.prototype.touchHandler = function (e) {
            var ele = this.scrollEle;
            var distance;
            distance = e.distanceX;
            if ((this.ieCheck) && this.contains(this.element, CLS_RTL)) {
                distance = -distance;
            }
            if (e.scrollDirection === 'Left') {
                ele.scrollLeft = ele.scrollLeft + distance;
            }
            else if (e.scrollDirection === 'Right') {
                ele.scrollLeft = ele.scrollLeft - distance;
            }
        };
        HScroll.prototype.arrowDisabling = function (addDisable, removeDisable) {
            addDisable.classList.add(CLS_DISABLE);
            addDisable.setAttribute('aria-disabled', 'true');
            addDisable.removeAttribute('tabindex');
            clearInterval(this.timeout);
            removeDisable.classList.remove(CLS_DISABLE);
            removeDisable.setAttribute('aria-disabled', 'false');
            removeDisable.setAttribute('tabindex', '0');
            this.repeatScroll();
        };
        HScroll.prototype.scrollHandler = function (e) {
            var target = e.target;
            var width = target.offsetWidth;
            var rootEle = this.element;
            var navLeftEle = this.element.querySelector('.' + CLS_HSCROLLNAVLEFT);
            var navRightEle = this.element.querySelector('.' + CLS_HSCROLLNAVRIGHT);
            var scrollLeft = target.scrollLeft;
            if (scrollLeft <= 0) {
                scrollLeft = -scrollLeft;
            }
            if (scrollLeft === 0) {
                if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {
                    this.arrowDisabling(navLeftEle, navRightEle);
                }
                else {
                    this.arrowDisabling(navRightEle, navLeftEle);
                }
            }
            else if (Math.ceil(width + scrollLeft + .1) >= target.scrollWidth) {
                if ((!this.contains(rootEle, CLS_RTL) || this.browserCheck) || this.ieCheck) {
                    this.arrowDisabling(navRightEle, navLeftEle);
                }
                else {
                    this.arrowDisabling(navLeftEle, navRightEle);
                }
            }
            else {
                var disEle = this.element.querySelector('.' + CLS_HSCROLLNAV + '.' + CLS_DISABLE);
                if (disEle) {
                    disEle.classList.remove(CLS_DISABLE);
                    disEle.setAttribute('aria-disabled', 'false');
                    disEle.setAttribute('tabindex', '0');
                }
            }
        };
        HScroll.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'scrollStep':
                        break;
                    case 'enableRtl':
                        newProp.enableRtl ? this.element.classList.add(CLS_RTL) : this.element.classList.remove(CLS_RTL);
                        break;
                }
            }
        };
        __decorate([
            ej2_base_2.Property(40)
        ], HScroll.prototype, "scrollStep", void 0);
        HScroll = __decorate([
            ej2_base_2.NotifyPropertyChanges
        ], HScroll);
        return HScroll;
    }(ej2_base_1.Component));
    exports.HScroll = HScroll;
});
