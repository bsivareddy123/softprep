var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-data", "@syncfusion/ej2-base", "@syncfusion/ej2-lists", "@syncfusion/ej2-buttons", "@syncfusion/ej2-inputs", "@syncfusion/ej2-popups"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, ej2_base_6, ej2_data_1, ej2_base_7, ej2_lists_1, ej2_buttons_1, ej2_inputs_1, ej2_popups_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ROOT = 'e-treeview';
    var COLLAPSIBLE = 'e-icon-collapsible';
    var EXPANDABLE = 'e-icon-expandable';
    var LISTITEM = 'e-list-item';
    var LISTTEXT = 'e-list-text';
    var PARENTITEM = 'e-list-parent';
    var HOVER = 'e-hover';
    var ACTIVE = 'e-active';
    var LOAD = 'e-icons-spinner';
    var PROCESS = 'e-process';
    var ICON = 'e-icons';
    var TEXTWRAP = 'e-text-content';
    var INPUT = 'e-input';
    var INPUTGROUP = 'e-input-group';
    var TREEINPUT = 'e-tree-input';
    var EDITING = 'e-editing';
    var RTL = 'e-rtl';
    var DRAGITEM = 'e-drag-item';
    var DROPPABLE = 'e-droppable';
    var DRAGGING = 'e-dragging';
    var SIBLING = 'e-sibling';
    var DROPIN = 'e-drop-in';
    var DROPNEXT = 'e-drop-next';
    var DROPOUT = 'e-drop-out';
    var NODROP = 'e-no-drop';
    var FULLROWWRAP = 'e-fullrow-wrap';
    var FULLROW = 'e-fullrow';
    var SELECTED = 'e-selected';
    var EXPANDED = 'e-expanded';
    var NODECOLLAPSED = 'e-node-collapsed';
    var DISABLE = 'e-disable';
    var CONTENT = 'e-content';
    var DOWNTAIL = 'e-downtail';
    var DROPCOUNT = 'e-drop-count';
    var CHECK = 'e-check';
    var INDETERMINATE = 'e-stop';
    var CHECKBOXWRAP = 'e-checkbox-wrapper';
    var CHECKBOXFRAME = 'e-frame';
    var CHECKBOXRIPPLE = 'e-ripple-container';
    var FOCUS = 'e-node-focus';
    var IMAGE = 'e-list-img';
    var BIGGER = 'e-bigger';
    var SMALL = 'e-small';
    var treeAriaAttr = {
        treeRole: 'tree',
        itemRole: 'treeitem',
        listRole: 'group',
        itemText: '',
        wrapperRole: '',
    };
    var FieldsSettings = (function (_super) {
        __extends(FieldsSettings, _super);
        function FieldsSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_2.Property('child')
        ], FieldsSettings.prototype, "child", void 0);
        __decorate([
            ej2_base_2.Property([])
        ], FieldsSettings.prototype, "dataSource", void 0);
        __decorate([
            ej2_base_2.Property('expanded')
        ], FieldsSettings.prototype, "expanded", void 0);
        __decorate([
            ej2_base_2.Property('hasChildren')
        ], FieldsSettings.prototype, "hasChildren", void 0);
        __decorate([
            ej2_base_2.Property('htmlAttributes')
        ], FieldsSettings.prototype, "htmlAttributes", void 0);
        __decorate([
            ej2_base_2.Property('iconCss')
        ], FieldsSettings.prototype, "iconCss", void 0);
        __decorate([
            ej2_base_2.Property('id')
        ], FieldsSettings.prototype, "id", void 0);
        __decorate([
            ej2_base_2.Property('imageUrl')
        ], FieldsSettings.prototype, "imageUrl", void 0);
        __decorate([
            ej2_base_2.Property('isChecked')
        ], FieldsSettings.prototype, "isChecked", void 0);
        __decorate([
            ej2_base_2.Property('parentID')
        ], FieldsSettings.prototype, "parentID", void 0);
        __decorate([
            ej2_base_2.Property(null)
        ], FieldsSettings.prototype, "query", void 0);
        __decorate([
            ej2_base_2.Property('selected')
        ], FieldsSettings.prototype, "selected", void 0);
        __decorate([
            ej2_base_2.Property(null)
        ], FieldsSettings.prototype, "tableName", void 0);
        __decorate([
            ej2_base_2.Property('text')
        ], FieldsSettings.prototype, "text", void 0);
        __decorate([
            ej2_base_2.Property('tooltip')
        ], FieldsSettings.prototype, "tooltip", void 0);
        __decorate([
            ej2_base_2.Property('navigateUrl')
        ], FieldsSettings.prototype, "navigateUrl", void 0);
        return FieldsSettings;
    }(ej2_base_2.ChildProperty));
    exports.FieldsSettings = FieldsSettings;
    var ActionSettings = (function (_super) {
        __extends(ActionSettings, _super);
        function ActionSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_2.Property('SlideDown')
        ], ActionSettings.prototype, "effect", void 0);
        __decorate([
            ej2_base_2.Property(400)
        ], ActionSettings.prototype, "duration", void 0);
        __decorate([
            ej2_base_2.Property('linear')
        ], ActionSettings.prototype, "easing", void 0);
        return ActionSettings;
    }(ej2_base_2.ChildProperty));
    exports.ActionSettings = ActionSettings;
    var NodeAnimationSettings = (function (_super) {
        __extends(NodeAnimationSettings, _super);
        function NodeAnimationSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_2.Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)
        ], NodeAnimationSettings.prototype, "collapse", void 0);
        __decorate([
            ej2_base_2.Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)
        ], NodeAnimationSettings.prototype, "expand", void 0);
        return NodeAnimationSettings;
    }(ej2_base_2.ChildProperty));
    exports.NodeAnimationSettings = NodeAnimationSettings;
    var TreeView = (function (_super) {
        __extends(TreeView, _super);
        function TreeView(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.mouseDownStatus = false;
            return _this;
        }
        TreeView.prototype.getModuleName = function () {
            return 'treeview';
        };
        TreeView.prototype.preRender = function () {
            var _this = this;
            this.checkActionNodes = [];
            this.dragStartAction = false;
            this.isAnimate = false;
            this.keyConfigs = {
                escape: 'escape',
                end: 'end',
                enter: 'enter',
                f2: 'f2',
                home: 'home',
                moveDown: 'downarrow',
                moveLeft: 'leftarrow',
                moveRight: 'rightarrow',
                moveUp: 'uparrow',
                ctrlDown: 'ctrl+downarrow',
                ctrlUp: 'ctrl+uparrow',
                ctrlEnter: 'ctrl+enter',
                ctrlHome: 'ctrl+home',
                ctrlEnd: 'ctrl+end',
                ctrlA: 'ctrl+A',
                shiftDown: 'shift+downarrow',
                shiftUp: 'shift+uparrow',
                shiftEnter: 'shift+enter',
                shiftHome: 'shift+home',
                shiftEnd: 'shift+end',
                csDown: 'ctrl+shift+downarrow',
                csUp: 'ctrl+shift+uparrow',
                csEnter: 'ctrl+shift+enter',
                csHome: 'ctrl+shift+home',
                csEnd: 'ctrl+shift+end',
                space: 'space',
            };
            this.listBaseOption = {
                expandCollapse: true,
                fields: this.fields.properties,
                showIcon: true,
                expandIconClass: EXPANDABLE,
                ariaAttributes: treeAriaAttr,
                expandIconPosition: 'Left',
                itemCreated: function (e) {
                    _this.beforeNodeCreate(e);
                },
            };
            this.listBaseOption.fields.url = this.fields.navigateUrl;
            this.aniObj = new ej2_base_4.Animation({});
            this.treeList = [];
            this.isLoaded = false;
            this.setTouchClass();
            if (ej2_base_7.isNullOrUndefined(this.selectedNodes)) {
                this.setProperties({ selectedNodes: [] }, true);
            }
            if (ej2_base_7.isNullOrUndefined(this.checkedNodes)) {
                this.setProperties({ checkedNodes: [] }, true);
            }
        };
        TreeView.prototype.getPersistData = function () {
            var keyEntity = ['selectedNodes', 'checkedNodes'];
            return this.addOnPersist(keyEntity);
        };
        TreeView.prototype.render = function () {
            this.isAnimate = true;
            this.initialize();
            this.setDataBinding();
            this.setExpandOnType();
            this.setRipple();
            this.wireEditingEvents(this.allowEditing);
            this.setDragAndDrop(this.allowDragAndDrop);
            this.wireEvents();
        };
        TreeView.prototype.initialize = function () {
            this.element.setAttribute('role', 'tree');
            this.element.setAttribute('tabindex', '0');
            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
            this.setCssClass(null, this.cssClass);
            this.setEnableRtl();
            this.setFullRow(this.fullRowSelect);
            this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
        };
        TreeView.prototype.setEnableRtl = function () {
            this.enableRtl ? ej2_base_6.addClass([this.element], RTL) : ej2_base_6.removeClass([this.element], RTL);
        };
        TreeView.prototype.setRipple = function () {
            var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;
            var rippleModel = {
                selector: tempStr,
                ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP
            };
            this.rippleFn = ej2_base_4.rippleEffect(this.element, rippleModel);
            var iconModel = {
                selector: '.' + TEXTWRAP + ' > .' + ICON,
                isCenterRipple: true,
            };
            this.rippleIconFn = ej2_base_4.rippleEffect(this.element, iconModel);
        };
        TreeView.prototype.setFullRow = function (isEnabled) {
            isEnabled ? ej2_base_6.addClass([this.element], FULLROWWRAP) : ej2_base_6.removeClass([this.element], FULLROWWRAP);
        };
        TreeView.prototype.setMultiSelect = function (isEnabled) {
            var firstUl = ej2_base_6.select('.' + PARENTITEM, this.element);
            if (isEnabled) {
                firstUl.setAttribute('aria-multiselectable', 'true');
            }
            else {
                firstUl.removeAttribute('aria-multiselectable');
            }
        };
        TreeView.prototype.templateComplier = function (template) {
            if (template) {
                var e = void 0;
                try {
                    if (document.querySelectorAll(template).length) {
                        return ej2_base_1.compile(document.querySelector(template).innerHTML.trim());
                    }
                }
                catch (e) {
                    return ej2_base_1.compile(template);
                }
            }
            return undefined;
        };
        TreeView.prototype.setDataBinding = function () {
            var _this = this;
            this.treeList.push('false');
            if (this.fields.dataSource instanceof ej2_data_1.DataManager) {
                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {
                    _this.treeList.pop();
                    _this.treeData = e.result;
                    _this.isNumberTypeId = _this.getType();
                    _this.setRootData();
                    _this.renderItems(true);
                    if (_this.treeList.length === 0 && !_this.isLoaded) {
                        _this.finalize();
                    }
                });
            }
            else {
                this.treeList.pop();
                if (ej2_base_7.isNullOrUndefined(this.fields.dataSource)) {
                    this.rootData = this.treeData = [];
                }
                else {
                    this.treeData = this.fields.dataSource;
                    this.setRootData();
                }
                this.renderItems(false);
            }
            if (this.treeList.length === 0 && !this.isLoaded) {
                this.finalize();
            }
        };
        TreeView.prototype.getQuery = function (mapper, value) {
            if (value === void 0) { value = null; }
            var columns = [];
            var query;
            if (!mapper.query) {
                query = new ej2_data_1.Query();
                var prop = this.getActualProperties(mapper);
                for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {
                    var col = _a[_i];
                    if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]
                        && columns.indexOf(mapper[col]) === -1) {
                        columns.push(mapper[col]);
                    }
                }
                query.select(columns);
                if (prop.hasOwnProperty('tableName')) {
                    query.from(mapper.tableName);
                }
            }
            else {
                query = mapper.query.clone();
            }
            ej2_lists_1.ListBase.addSorting(this.sortOrder, mapper.text, query);
            if (!ej2_base_7.isNullOrUndefined(value) && !ej2_base_7.isNullOrUndefined(mapper.parentID)) {
                query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));
            }
            return query;
        };
        TreeView.prototype.getType = function () {
            return this.treeData[0] ? ((typeof ej2_base_7.getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;
        };
        TreeView.prototype.setRootData = function () {
            this.dataType = this.getDataType(this.treeData, this.fields);
            if (this.dataType === 1) {
                this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);
                var rootItems = this.getChildNodes(this.treeData, undefined, true);
                if (ej2_base_7.isNullOrUndefined(rootItems)) {
                    this.rootData = [];
                }
                else {
                    this.rootData = rootItems;
                }
            }
            else {
                this.rootData = this.treeData;
            }
        };
        TreeView.prototype.renderItems = function (isSorted) {
            this.listBaseOption.ariaAttributes.level = 1;
            this.ulElement = ej2_lists_1.ListBase.createList(isSorted ? this.rootData : this.getSortedData(this.rootData), this.listBaseOption);
            this.element.appendChild(this.ulElement);
            this.finalizeNode(this.element);
        };
        TreeView.prototype.beforeNodeCreate = function (e) {
            if (this.showCheckBox) {
                var checkboxEle = ej2_buttons_1.createCheckBox(true, { cssClass: this.touchClass });
                var icon = ej2_base_6.select('div.' + ICON, e.item);
                var id = e.item.getAttribute('data-uid');
                e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[ej2_base_7.isNullOrUndefined(icon) ? 0 : 1]);
                var checkValue = ej2_base_7.getValue(e.fields.isChecked, e.curData);
                if (this.checkedNodes.indexOf(id) > -1) {
                    ej2_base_6.select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
                    checkboxEle.setAttribute('aria-checked', 'true');
                    this.addCheck(e.item);
                }
                else if (!ej2_base_7.isNullOrUndefined(checkValue) && checkValue.toString() === 'true') {
                    ej2_base_6.select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);
                    checkboxEle.setAttribute('aria-checked', 'true');
                    this.addCheck(e.item);
                }
                else {
                    checkboxEle.setAttribute('aria-checked', 'false');
                }
                var frame = ej2_base_6.select('.' + CHECKBOXFRAME, checkboxEle);
                ej2_base_3.EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);
                ej2_base_3.EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);
            }
            if (this.fullRowSelect) {
                this.createFullRow(e.item);
            }
            if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {
                e.item.setAttribute('aria-selected', 'false');
            }
            var fields = e.fields;
            this.addActionClass(e, fields.selected, SELECTED);
            this.addActionClass(e, fields.expanded, EXPANDED);
            if (!ej2_base_7.isNullOrUndefined(this.nodeTemplateFn)) {
                var textEle = e.item.querySelector('.' + LISTTEXT);
                textEle.innerHTML = '';
                ej2_base_6.append(this.nodeTemplateFn(e.curData), textEle);
            }
            var eventArgs = {
                node: e.item,
                nodeData: e.curData,
                text: e.text,
            };
            this.trigger('drawNode', eventArgs);
        };
        TreeView.prototype.frameMouseHandler = function (e) {
            var rippleSpan = ej2_base_6.select('.' + CHECKBOXRIPPLE, e.target.parentElement);
            ej2_buttons_1.rippleMouseHandler(e, rippleSpan);
        };
        TreeView.prototype.addActionClass = function (e, action, cssClass) {
            var data = e.curData;
            var actionValue = ej2_base_7.getValue(action, data);
            if (!ej2_base_7.isNullOrUndefined(actionValue) && actionValue.toString() !== 'false') {
                e.item.classList.add(cssClass);
            }
        };
        TreeView.prototype.getDataType = function (ds, mapper) {
            if (this.fields.dataSource instanceof ej2_data_1.DataManager) {
                return 2;
            }
            for (var i = 0, len = ds.length; i < len; i++) {
                if ((typeof mapper.child === 'string') && !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(mapper.child, ds[i]))) {
                    return 2;
                }
                if (!ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(mapper.parentID, ds[i])) || !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(mapper.hasChildren, ds[i]))) {
                    return 1;
                }
            }
            return 1;
        };
        TreeView.prototype.getGroupedData = function (dataSource, groupBy) {
            var cusQuery = new ej2_data_1.Query().group(groupBy);
            var ds = ej2_lists_1.ListBase.getDataSource(dataSource, cusQuery);
            var grpItem = [];
            for (var j = 0; j < ds.length; j++) {
                var itemObj = ds[j].items;
                grpItem.push(itemObj);
            }
            return grpItem;
        };
        TreeView.prototype.getSortedData = function (list) {
            if (list && this.sortOrder !== 'None') {
                list = ej2_lists_1.ListBase.getDataSource(list, ej2_lists_1.ListBase.addSorting(this.sortOrder, this.fields.text));
            }
            return list;
        };
        TreeView.prototype.finalizeNode = function (element) {
            var iNodes = ej2_base_6.selectAll('.' + IMAGE, element);
            for (var k = 0; k < iNodes.length; k++) {
                iNodes[k].setAttribute('alt', IMAGE);
            }
            if (this.isLoaded) {
                var sNodes = ej2_base_6.selectAll('.' + SELECTED, element);
                for (var i = 0; i < sNodes.length; i++) {
                    this.selectNode(sNodes[i], null);
                    break;
                }
                ej2_base_6.removeClass(sNodes, SELECTED);
            }
            var cNodes = ej2_base_6.selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);
            for (var j = 0; j < cNodes.length; j++) {
                var icon = ej2_base_6.select('div.' + ICON, cNodes[j]);
                if (icon && icon.classList.contains(EXPANDABLE)) {
                    cNodes[j].setAttribute('aria-expanded', 'false');
                    ej2_base_6.addClass([cNodes[j]], NODECOLLAPSED);
                }
            }
            var eNodes = ej2_base_6.selectAll('.' + EXPANDED, element);
            for (var i = 0; i < eNodes.length; i++) {
                this.renderChildNodes(eNodes[i]);
            }
            ej2_base_6.removeClass(eNodes, EXPANDED);
            this.updateList();
            if (this.isLoaded) {
                this.updateCheckedProp();
            }
        };
        TreeView.prototype.updateCheckedProp = function () {
            var _this = this;
            if (this.showCheckBox) {
                var nodes_1 = [].concat([], this.checkedNodes);
                this.checkedNodes.forEach(function (value, index) {
                    var checkBox = _this.element.querySelector('[data-uid="' + value + '"]');
                    if (ej2_base_7.isNullOrUndefined(checkBox)) {
                        nodes_1 = nodes_1.filter(function (e) { return e !== value; });
                    }
                });
                this.setProperties({ checkedNodes: nodes_1 }, true);
            }
        };
        TreeView.prototype.ensureParentCheckState = function (element) {
            if (!ej2_base_7.isNullOrUndefined(element)) {
                if (element.classList.contains(ROOT)) {
                    return;
                }
                var ulElement = element;
                if (element.classList.contains(LISTITEM)) {
                    ulElement = ej2_base_6.select('.' + PARENTITEM, element);
                }
                var checkedNodes = ej2_base_6.selectAll('.' + CHECK, ulElement);
                var nodes = ej2_base_6.selectAll('.' + LISTITEM, ulElement);
                var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];
                if (nodes.length === checkedNodes.length) {
                    this.changeState(checkBoxEle, 'check', null, true, true);
                }
                else if (checkedNodes.length > 0) {
                    this.changeState(checkBoxEle, 'indeterminate', null, true, true);
                }
                else if (checkedNodes.length === 0) {
                    this.changeState(checkBoxEle, 'uncheck', null, true, true);
                }
                var parentUL = ej2_base_6.closest(element, '.' + PARENTITEM);
                if (!ej2_base_7.isNullOrUndefined(parentUL)) {
                    var currentParent = ej2_base_6.closest(parentUL, '.' + LISTITEM);
                    this.ensureParentCheckState(currentParent);
                }
            }
        };
        TreeView.prototype.ensureChildCheckState = function (element, e) {
            if (!ej2_base_7.isNullOrUndefined(element)) {
                var childElement = ej2_base_6.select('.' + PARENTITEM, element);
                var checkBoxes = void 0;
                if (!ej2_base_7.isNullOrUndefined(childElement)) {
                    checkBoxes = ej2_base_6.selectAll('.' + CHECKBOXWRAP, childElement);
                    var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
                    var checkedState = void 0;
                    for (var index = 0; index < checkBoxes.length; index++) {
                        if (!ej2_base_7.isNullOrUndefined(this.currentLoadData) && !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(this.fields.isChecked, this.currentLoadData[index]))) {
                            checkedState = ej2_base_7.getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';
                        }
                        else {
                            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);
                            checkedState = (!this.isLoaded && isNodeChecked) ? 'check' : (isChecked ? 'check' : 'uncheck');
                        }
                        this.changeState(checkBoxes[index], checkedState, e, true, true);
                    }
                }
            }
        };
        TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var liEle = this.getElement(nodes[i]);
                    if (ej2_base_7.isNullOrUndefined(liEle)) {
                        continue;
                    }
                    var checkBox = ej2_base_6.select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);
                    this.validateCheckNode(checkBox, !doCheck, liEle, null);
                }
            }
            else {
                var checkBoxes = ej2_base_6.selectAll('.' + CHECKBOXWRAP, this.element);
                for (var index = 0; index < checkBoxes.length; index++) {
                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');
                }
            }
        };
        TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd) {
            var ariaState;
            var eventArgs;
            var currLi = ej2_base_6.closest(wrapper, '.' + LISTITEM);
            if (!isPrevent) {
                this.checkActionNodes = [];
                eventArgs = this.getCheckEvent(currLi, state, e);
                this.trigger('nodeChecking', eventArgs);
                if (eventArgs.cancel) {
                    return;
                }
            }
            var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];
            if (state === 'check' && !frameSpan.classList.contains(CHECK)) {
                frameSpan.classList.remove(INDETERMINATE);
                frameSpan.classList.add(CHECK);
                this.addCheck(currLi);
                ariaState = 'true';
            }
            else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {
                ej2_base_6.removeClass([frameSpan], [CHECK, INDETERMINATE]);
                this.removeCheck(currLi);
                ariaState = 'false';
            }
            else if (state === 'indeterminate' && !frameSpan.classList.contains(INDETERMINATE)) {
                frameSpan.classList.remove(CHECK);
                frameSpan.classList.add(INDETERMINATE);
                this.removeCheck(currLi);
                ariaState = 'mixed';
            }
            ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;
            if (!ej2_base_7.isNullOrUndefined(ariaState)) {
                wrapper.setAttribute('aria-checked', ariaState);
            }
            if (isAdd) {
                var data = [].concat([], this.checkActionNodes);
                eventArgs = this.getCheckEvent(currLi, state, e);
                if (ej2_base_1.isUndefined(isPrevent)) {
                    eventArgs.data = data;
                }
            }
            if (!isPrevent) {
                if (!ej2_base_7.isNullOrUndefined(ariaState)) {
                    wrapper.setAttribute('aria-checked', ariaState);
                    eventArgs.data[0].checked = ariaState;
                    this.trigger('nodeChecked', eventArgs);
                    this.checkActionNodes = [];
                }
            }
        };
        TreeView.prototype.addCheck = function (liEle) {
            var id = liEle.getAttribute('data-uid');
            if (!ej2_base_7.isNullOrUndefined(id) && this.checkedNodes.indexOf(id) === -1) {
                this.checkedNodes.push(id);
            }
        };
        TreeView.prototype.removeCheck = function (liEle) {
            var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));
            if (index > -1) {
                this.checkedNodes.splice(index, 1);
            }
        };
        TreeView.prototype.getCheckEvent = function (currLi, action, e) {
            this.checkActionNodes.push(this.getNodeData(currLi));
            var nodeData = this.checkActionNodes;
            return { action: action, cancel: false, isInteracted: ej2_base_7.isNullOrUndefined(e) ? false : true, node: currLi, data: nodeData };
        };
        TreeView.prototype.finalize = function () {
            var firstUl = ej2_base_6.select('.' + PARENTITEM, this.element);
            firstUl.setAttribute('role', treeAriaAttr.treeRole);
            this.setMultiSelect(this.allowMultiSelection);
            var firstNode = ej2_base_6.select('.' + LISTITEM, this.element);
            if (firstNode) {
                ej2_base_6.addClass([firstNode], FOCUS);
                this.updateIdAttr(null, firstNode);
            }
            this.doSelectionAction();
            this.updateCheckedProp();
            this.isLoaded = true;
            this.isAnimate = false;
            var eventArgs = { data: this.treeData };
            this.trigger('dataBound', eventArgs);
        };
        TreeView.prototype.doSelectionAction = function () {
            var sNodes = ej2_base_6.selectAll('.' + SELECTED, this.element);
            var sUids = this.selectedNodes;
            if (sUids.length > 0) {
                this.setProperties({ selectedNodes: [] }, true);
                for (var i = 0; i < sUids.length; i++) {
                    var sNode = ej2_base_6.select('[data-uid="' + sUids[i] + '"]', this.element);
                    this.selectNode(sNode, null, true);
                    if (!this.allowMultiSelection) {
                        break;
                    }
                }
            }
            else {
                this.selectGivenNodes(sNodes);
            }
            ej2_base_6.removeClass(sNodes, SELECTED);
        };
        TreeView.prototype.selectGivenNodes = function (sNodes) {
            for (var i = 0; i < sNodes.length; i++) {
                this.selectNode(sNodes[i], null, true);
                if (!this.allowMultiSelection) {
                    break;
                }
            }
        };
        TreeView.prototype.clickHandler = function (e) {
            var target = e.target;
            ej2_base_3.EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);
            if (!target || this.dragStartAction) {
                return;
            }
            else {
                var classList = target.classList;
                var li = ej2_base_6.closest(target, '.' + LISTITEM);
                if (!li) {
                    return;
                }
                else {
                    this.removeHover();
                    this.setFocusElement(li);
                    if (this.showCheckBox) {
                        var checkWrapper = ej2_base_6.closest(target, '.' + CHECKBOXWRAP);
                        if (!ej2_base_7.isNullOrUndefined(checkWrapper)) {
                            var checkElement = ej2_base_6.select('.' + CHECKBOXFRAME, checkWrapper);
                            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, e);
                            this.triggerClickEvent(e, li);
                            return;
                        }
                    }
                    if (classList.contains(EXPANDABLE)) {
                        this.expandAction(li, target, e);
                    }
                    else if (classList.contains(COLLAPSIBLE)) {
                        this.collapseNode(li, target, e);
                    }
                    else {
                        if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {
                            this.toggleSelect(li, e, false);
                        }
                    }
                    this.triggerClickEvent(e, li);
                }
            }
        };
        TreeView.prototype.nodeCheckingEvent = function (wrapper, isCheck, e) {
            var currLi = ej2_base_6.closest(wrapper, '.' + LISTITEM);
            this.checkActionNodes = [];
            var ariaState = !isCheck ? 'true' : 'false';
            if (!ej2_base_7.isNullOrUndefined(ariaState)) {
                wrapper.setAttribute('aria-checked', ariaState);
            }
            var eventArgs = this.getCheckEvent(currLi, !isCheck ? 'uncheck' : 'check', e);
            this.trigger('nodeChecking', eventArgs);
            return eventArgs;
        };
        TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {
            var currLi = ej2_base_6.closest(wrapper, '.' + LISTITEM);
            var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);
            eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);
            this.trigger('nodeChecked', eventArgs);
        };
        TreeView.prototype.triggerClickEvent = function (e, li) {
            var eventArgs = {
                event: e,
                node: li,
            };
            this.trigger('nodeClicked', eventArgs);
        };
        TreeView.prototype.expandNode = function (currLi, icon) {
            var _this = this;
            if (icon.classList.contains(LOAD)) {
                this.hideSpinner(icon);
            }
            ej2_base_6.removeClass([icon], EXPANDABLE);
            ej2_base_6.addClass([icon], COLLAPSIBLE);
            var start = 0;
            var end = 0;
            var proxy = this;
            var ul = ej2_base_6.select('.' + PARENTITEM, currLi);
            var liEle = currLi;
            this.setHeight(liEle, ul);
            if (!this.isAnimate) {
                this.aniObj.animate(ul, {
                    name: this.animation.expand.effect,
                    duration: this.animation.expand.duration,
                    timingFunction: this.animation.expand.easing,
                    begin: function (args) {
                        liEle.style.overflow = 'hidden';
                        start = liEle.offsetHeight;
                        end = ej2_base_6.select('.' + TEXTWRAP, currLi).offsetHeight;
                    },
                    progress: function (args) {
                        args.element.style.display = 'block';
                        proxy.animateHeight(args, start, end);
                    },
                    end: function (args) {
                        args.element.style.display = 'block';
                        _this.expandedNode(liEle, ul, icon);
                    }
                });
            }
            else {
                this.expandedNode(liEle, ul, icon);
            }
        };
        TreeView.prototype.expandedNode = function (currLi, ul, icon) {
            ul.style.display = 'block';
            currLi.style.display = 'block';
            currLi.style.overflow = '';
            currLi.style.height = '';
            ej2_base_6.removeClass([icon], PROCESS);
            currLi.setAttribute('aria-expanded', 'true');
            ej2_base_6.removeClass([currLi], NODECOLLAPSED);
            if (this.isLoaded && this.expandArgs) {
                this.trigger('nodeExpanded', this.expandArgs);
            }
        };
        TreeView.prototype.collapseNode = function (currLi, icon, e) {
            var _this = this;
            if (icon.classList.contains(PROCESS)) {
                return;
            }
            else {
                ej2_base_6.addClass([icon], PROCESS);
            }
            var colArgs;
            if (this.isLoaded) {
                colArgs = this.getExpandEvent(currLi, e);
                this.trigger('nodeCollapsing', colArgs);
                if (colArgs.cancel) {
                    return;
                }
            }
            ej2_base_6.removeClass([icon], COLLAPSIBLE);
            ej2_base_6.addClass([icon], EXPANDABLE);
            var start = 0;
            var end = 0;
            var proxy = this;
            var ul = ej2_base_6.select('.' + PARENTITEM, currLi);
            var liEle = currLi;
            ej2_base_6.addClass([currLi], NODECOLLAPSED);
            this.aniObj.animate(ul, {
                name: this.animation.collapse.effect,
                duration: this.animation.collapse.duration,
                timingFunction: this.animation.collapse.easing,
                begin: function (args) {
                    liEle.style.overflow = 'hidden';
                    start = ej2_base_6.select('.' + TEXTWRAP, currLi).offsetHeight;
                    end = liEle.offsetHeight;
                },
                progress: function (args) {
                    proxy.animateHeight(args, start, end);
                },
                end: function (args) {
                    liEle.style.overflow = '';
                    args.element.style.display = 'none';
                    liEle.style.height = '';
                    ej2_base_6.removeClass([icon], PROCESS);
                    currLi.setAttribute('aria-expanded', 'false');
                    if (_this.isLoaded) {
                        _this.trigger('nodeCollapsed', colArgs);
                    }
                }
            });
        };
        TreeView.prototype.setHeight = function (currLi, ul) {
            ul.style.display = 'block';
            ul.style.visibility = 'hidden';
            currLi.style.height = currLi.offsetHeight + 'px';
            ul.style.display = 'none';
            ul.style.visibility = '';
        };
        TreeView.prototype.animateHeight = function (args, start, end) {
            var remaining = (args.duration - args.timeStamp) / args.duration;
            var currentHeight = (end - start) * remaining + start;
            args.element.parentElement.style.height = currentHeight + 'px';
        };
        TreeView.prototype.renderChildNodes = function (parentLi, expandChild) {
            var _this = this;
            var eicon = ej2_base_6.select('div.' + ICON, parentLi);
            if (ej2_base_7.isNullOrUndefined(eicon)) {
                return;
            }
            this.showSpinner(eicon);
            var childItems;
            if (this.fields.dataSource instanceof ej2_data_1.DataManager) {
                var level = this.parents(parentLi, '.' + PARENTITEM).length;
                var mapper_1 = this.getChildFields(this.fields, level, 1);
                if (ej2_base_7.isNullOrUndefined(mapper_1) || ej2_base_7.isNullOrUndefined(mapper_1.dataSource)) {
                    ej2_base_6.detach(eicon);
                    parentLi.removeAttribute('aria-expanded');
                    return;
                }
                this.treeList.push('false');
                mapper_1.dataSource.executeQuery(this.getQuery(mapper_1, parentLi.getAttribute('data-uid'))).then(function (e) {
                    _this.treeList.pop();
                    childItems = e.result;
                    _this.currentLoadData = childItems;
                    if (ej2_base_7.isNullOrUndefined(childItems) || childItems.length === 0) {
                        ej2_base_6.detach(eicon);
                        parentLi.removeAttribute('aria-expanded');
                    }
                    else {
                        var prop = _this.getActualProperties(mapper_1);
                        _this.listBaseOption.fields = prop;
                        _this.listBaseOption.fields.url = prop.navigateUrl;
                        var id = parentLi.getAttribute('data-uid');
                        var nodeData = _this.getNodeObject(id);
                        ej2_base_7.setValue('child', childItems, nodeData);
                        _this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
                        parentLi.appendChild(ej2_lists_1.ListBase.createList(childItems, _this.listBaseOption));
                        _this.expandNode(parentLi, eicon);
                        _this.ensureCheckNode(parentLi);
                        _this.finalizeNode(parentLi);
                        _this.renderSubChild(parentLi, expandChild);
                    }
                    if (_this.treeList.length === 0 && !_this.isLoaded) {
                        _this.finalize();
                    }
                });
            }
            else {
                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));
                this.currentLoadData = childItems;
                if (ej2_base_7.isNullOrUndefined(childItems) || childItems.length === 0) {
                    ej2_base_6.detach(eicon);
                    parentLi.removeAttribute('aria-expanded');
                    return;
                }
                else {
                    this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;
                    parentLi.appendChild(ej2_lists_1.ListBase.createList(this.getSortedData(childItems), this.listBaseOption));
                    this.expandNode(parentLi, eicon);
                    this.ensureCheckNode(parentLi);
                    this.finalizeNode(parentLi);
                    this.renderSubChild(parentLi, expandChild);
                }
            }
        };
        TreeView.prototype.ensureCheckNode = function (element) {
            if (this.showCheckBox) {
                this.ensureChildCheckState(element);
                this.ensureParentCheckState(element);
            }
            this.currentLoadData = null;
        };
        TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {
            if (nodeLevel === dataLevel) {
                return mapper;
            }
            else {
                return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
            }
        };
        TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {
            var childData;
            if (nodeLevel === dataLevel) {
                return this.getChildMapper(mapper);
            }
            else {
                return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);
            }
        };
        TreeView.prototype.getChildMapper = function (mapper) {
            return (typeof mapper.child === 'string' || ej2_base_7.isNullOrUndefined(mapper.child)) ? mapper : mapper.child;
        };
        TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {
            if (isRoot === void 0) { isRoot = false; }
            var childNodes;
            if (ej2_base_7.isNullOrUndefined(obj)) {
                return childNodes;
            }
            else if (this.dataType === 1) {
                return this.getChildGroup(this.groupedData, parentId, isRoot);
            }
            else {
                if (typeof this.fields.child === 'string') {
                    for (var i = 0, objlen = obj.length; i < objlen; i++) {
                        var dataId = ej2_base_7.getValue(this.fields.id, obj[i]);
                        if (dataId && dataId.toString() === parentId) {
                            return ej2_base_7.getValue(this.fields.child, obj[i]);
                        }
                        else if (!ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(this.fields.child, obj[i]))) {
                            childNodes = this.getChildNodes(ej2_base_7.getValue(this.fields.child, obj[i]), parentId);
                            if (childNodes !== undefined) {
                                break;
                            }
                        }
                    }
                }
            }
            return childNodes;
        };
        TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {
            var childNodes;
            if (ej2_base_7.isNullOrUndefined(data)) {
                return childNodes;
            }
            for (var i = 0, objlen = data.length; i < objlen; i++) {
                if (!ej2_base_7.isNullOrUndefined(data[i][0]) && !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(this.fields.parentID, data[i][0]))) {
                    if (ej2_base_7.getValue(this.fields.parentID, data[i][0]).toString() === parentId) {
                        return data[i];
                    }
                }
                else if (isRoot) {
                    return data[i];
                }
                else {
                    return [];
                }
            }
            return childNodes;
        };
        TreeView.prototype.renderSubChild = function (element, expandChild) {
            if (expandChild) {
                var cIcons = ej2_base_6.selectAll('.' + EXPANDABLE, element);
                for (var i = 0, len = cIcons.length; i < len; i++) {
                    var icon = cIcons[i];
                    var curLi = ej2_base_6.closest(icon, '.' + LISTITEM);
                    this.renderChildNodes(curLi, expandChild);
                }
            }
        };
        TreeView.prototype.toggleSelect = function (li, e, multiSelect) {
            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {
                this.unselectNode(li, e);
            }
            else {
                this.selectNode(li, e, multiSelect);
            }
        };
        TreeView.prototype.isActive = function (li) {
            return li.classList.contains(ACTIVE) ? true : false;
        };
        TreeView.prototype.selectNode = function (li, e, multiSelect) {
            if (ej2_base_7.isNullOrUndefined(li) || (!this.allowMultiSelection && this.isActive(li) && !ej2_base_7.isNullOrUndefined(e))) {
                this.setFocusElement(li);
                return;
            }
            var eventArgs;
            if (this.isLoaded) {
                eventArgs = this.getSelectEvent(li, 'select', e);
                this.trigger('nodeSelecting', eventArgs);
                if (eventArgs.cancel) {
                    return;
                }
            }
            if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {
                this.removeSelectAll();
            }
            if (this.allowMultiSelection && e && e.shiftKey) {
                if (!this.startNode) {
                    this.startNode = li;
                }
                var startIndex = this.liList.indexOf(this.startNode);
                var endIndex = this.liList.indexOf(li);
                if (startIndex > endIndex) {
                    var temp = startIndex;
                    startIndex = endIndex;
                    endIndex = temp;
                }
                for (var i = startIndex; i <= endIndex; i++) {
                    var currNode = this.liList[i];
                    if (ej2_base_6.isVisible(currNode)) {
                        this.addSelect(currNode);
                    }
                }
            }
            else {
                this.startNode = li;
                this.addSelect(li);
            }
            this.setFocusElement(li);
            if (this.isLoaded) {
                this.trigger('nodeSelected', eventArgs);
            }
        };
        TreeView.prototype.unselectNode = function (li, e) {
            var eventArgs;
            if (this.isLoaded) {
                eventArgs = this.getSelectEvent(li, 'un-select', e);
                this.trigger('nodeSelecting', eventArgs);
                if (eventArgs.cancel) {
                    return;
                }
            }
            this.removeSelect(li);
            this.setFocusElement(li);
            if (this.isLoaded) {
                this.trigger('nodeSelected', eventArgs);
            }
        };
        TreeView.prototype.setFocusElement = function (li) {
            if (!ej2_base_7.isNullOrUndefined(li)) {
                var focusedNode = this.getFocusedNode();
                if (focusedNode) {
                    ej2_base_6.removeClass([focusedNode], FOCUS);
                }
                ej2_base_6.addClass([li], FOCUS);
                this.updateIdAttr(focusedNode, li);
            }
        };
        TreeView.prototype.addSelect = function (liEle) {
            liEle.setAttribute('aria-selected', 'true');
            ej2_base_6.addClass([liEle], ACTIVE);
            var id = liEle.getAttribute('data-uid');
            if (!ej2_base_7.isNullOrUndefined(id) && this.selectedNodes.indexOf(id) === -1) {
                this.selectedNodes.push(id);
            }
        };
        TreeView.prototype.removeSelect = function (liEle) {
            if (this.allowMultiSelection) {
                liEle.setAttribute('aria-selected', 'false');
            }
            else {
                liEle.removeAttribute('aria-selected');
            }
            ej2_base_6.removeClass([liEle], ACTIVE);
            var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));
            if (index > -1) {
                this.selectedNodes.splice(index, 1);
            }
        };
        TreeView.prototype.removeSelectAll = function () {
            var selectedLI = this.element.querySelectorAll('.' + ACTIVE);
            for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
                var ele = selectedLI_1[_i];
                if (this.allowMultiSelection) {
                    ele.setAttribute('aria-selected', 'false');
                }
                else {
                    ele.removeAttribute('aria-selected');
                }
            }
            ej2_base_6.removeClass(selectedLI, ACTIVE);
            this.setProperties({ selectedNodes: [] }, true);
        };
        TreeView.prototype.getSelectEvent = function (currLi, action, e) {
            var nodeData = this.getNodeData(currLi);
            return { action: action, cancel: false, isInteracted: ej2_base_7.isNullOrUndefined(e) ? false : true, node: currLi, nodeData: nodeData };
        };
        TreeView.prototype.setExpandOnType = function () {
            this.expandOnType = (this.expandOn === 'Auto') ? (ej2_base_1.Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;
        };
        TreeView.prototype.expandHandler = function (e) {
            var target = e.target;
            if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||
                target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||
                target.classList.contains(ICON) || this.showCheckBox && ej2_base_6.closest(target, '.' + CHECKBOXWRAP)) {
                return;
            }
            else {
                this.expandCollapseAction(ej2_base_6.closest(target, '.' + LISTITEM), e);
            }
        };
        TreeView.prototype.expandCollapseAction = function (currLi, e) {
            var icon = ej2_base_6.select('div.' + ICON, currLi);
            if (!icon || icon.classList.contains(PROCESS)) {
                return;
            }
            else {
                var classList = icon.classList;
                if (classList.contains(EXPANDABLE)) {
                    this.expandAction(currLi, icon, e);
                }
                else {
                    this.collapseNode(currLi, icon, e);
                }
            }
        };
        TreeView.prototype.expandAction = function (currLi, icon, e, expandChild) {
            if (icon.classList.contains(PROCESS)) {
                return;
            }
            else {
                ej2_base_6.addClass([icon], PROCESS);
            }
            if (this.isLoaded) {
                this.expandArgs = this.getExpandEvent(currLi, e);
                this.trigger('nodeExpanding', this.expandArgs);
                if (this.expandArgs.cancel) {
                    return;
                }
            }
            var ul = ej2_base_6.select('.' + PARENTITEM, currLi);
            if (ul && ul.nodeName === 'UL') {
                this.expandNode(currLi, icon);
            }
            else {
                this.renderChildNodes(currLi, expandChild);
            }
        };
        TreeView.prototype.keyActionHandler = function (e) {
            var target = e.target;
            var focusedNode = this.getFocusedNode();
            if (target && target.classList.contains(INPUT)) {
                var inpEle = target;
                if (e.action === 'enter') {
                    inpEle.blur();
                    this.element.focus();
                    ej2_base_6.addClass([focusedNode], HOVER);
                }
                else if (e.action === 'escape') {
                    inpEle.value = this.oldText;
                    inpEle.blur();
                    this.element.focus();
                    ej2_base_6.addClass([focusedNode], HOVER);
                }
                return;
            }
            e.preventDefault();
            var eventArgs = {
                cancel: false,
                event: e,
                node: focusedNode,
            };
            this.trigger('keyPress', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            switch (e.action) {
                case 'space':
                    if (this.showCheckBox) {
                        this.checkNode(e);
                    }
                    break;
                case 'moveRight':
                    this.openNode(this.enableRtl ? false : true, e);
                    break;
                case 'moveLeft':
                    this.openNode(this.enableRtl ? true : false, e);
                    break;
                case 'shiftDown':
                    this.shiftKeySelect(true, e);
                    break;
                case 'moveDown':
                case 'ctrlDown':
                case 'csDown':
                    this.navigateNode(true);
                    break;
                case 'shiftUp':
                    this.shiftKeySelect(false, e);
                    break;
                case 'moveUp':
                case 'ctrlUp':
                case 'csUp':
                    this.navigateNode(false);
                    break;
                case 'home':
                case 'shiftHome':
                case 'ctrlHome':
                case 'csHome':
                    this.navigateRootNode(true);
                    break;
                case 'end':
                case 'shiftEnd':
                case 'ctrlEnd':
                case 'csEnd':
                    this.navigateRootNode(false);
                    break;
                case 'enter':
                case 'ctrlEnter':
                case 'shiftEnter':
                case 'csEnter':
                    this.toggleSelect(focusedNode, e);
                    break;
                case 'f2':
                    if (this.allowEditing) {
                        this.createTextbox(focusedNode, e);
                    }
                    break;
                case 'ctrlA':
                    if (this.allowMultiSelection) {
                        var sNodes = ej2_base_6.selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', this.element);
                        this.selectGivenNodes(sNodes);
                    }
                    break;
            }
        };
        TreeView.prototype.navigateToFocus = function (isUp) {
            var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);
            var pos = focusNode.getBoundingClientRect();
            var parent = this.getScrollParent(this.element);
            if (!ej2_base_7.isNullOrUndefined(parent)) {
                var parentPos = parent.getBoundingClientRect();
                if (pos.bottom > parentPos.bottom) {
                    parent.scrollTop += pos.bottom - parentPos.bottom;
                }
                else if (pos.top < parentPos.top) {
                    parent.scrollTop -= parentPos.top - pos.top;
                }
            }
            var isVisible = this.isVisibleInViewport(focusNode);
            if (!isVisible) {
                focusNode.scrollIntoView(isUp);
            }
        };
        TreeView.prototype.isVisibleInViewport = function (txtWrap) {
            var pos = txtWrap.getBoundingClientRect();
            return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                pos.right <= (window.innerWidth || document.documentElement.clientWidth));
        };
        TreeView.prototype.getScrollParent = function (node) {
            if (ej2_base_7.isNullOrUndefined(node)) {
                return null;
            }
            return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);
        };
        TreeView.prototype.shiftKeySelect = function (isTowards, e) {
            if (this.allowMultiSelection) {
                var focusedNode = this.getFocusedNode();
                var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);
                this.removeHover();
                this.setFocusElement(nextNode);
                this.toggleSelect(nextNode, e, false);
                this.navigateToFocus(!isTowards);
            }
            else {
                this.navigateNode(isTowards);
            }
        };
        TreeView.prototype.checkNode = function (e) {
            var focusedNode = this.getFocusedNode();
            var checkWrap = ej2_base_6.select('.' + CHECKBOXWRAP, focusedNode);
            var isChecked = ej2_base_6.select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);
            this.validateCheckNode(checkWrap, isChecked, focusedNode, e);
        };
        TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {
            var eventArgs = this.nodeCheckingEvent(checkWrap, isCheck, e);
            if (eventArgs.cancel) {
                return;
            }
            this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);
            this.ensureChildCheckState(li);
            this.ensureParentCheckState(ej2_base_6.closest(ej2_base_6.closest(li, '.' + PARENTITEM), '.' + LISTITEM));
            this.nodeCheckedEvent(checkWrap, isCheck, e);
        };
        TreeView.prototype.openNode = function (toBeOpened, e) {
            var focusedNode = this.getFocusedNode();
            var icon = ej2_base_6.select('div.' + ICON, focusedNode);
            if (toBeOpened) {
                if (!icon) {
                    return;
                }
                else if (icon.classList.contains(EXPANDABLE)) {
                    this.expandAction(focusedNode, icon, e);
                }
                else {
                    this.focusNextNode(focusedNode, true);
                }
            }
            else {
                if (icon && icon.classList.contains(COLLAPSIBLE)) {
                    this.collapseNode(focusedNode, icon, e);
                }
                else {
                    var parentLi = ej2_base_6.closest(ej2_base_6.closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);
                    if (!parentLi) {
                        return;
                    }
                    else {
                        this.setFocus(focusedNode, parentLi);
                        this.navigateToFocus(true);
                    }
                }
            }
        };
        TreeView.prototype.navigateNode = function (isTowards) {
            var focusedNode = this.getFocusedNode();
            this.focusNextNode(focusedNode, isTowards);
        };
        TreeView.prototype.navigateRootNode = function (isBackwards) {
            var focusedNode = this.getFocusedNode();
            var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();
            this.setFocus(focusedNode, rootNode);
            this.navigateToFocus(isBackwards);
        };
        TreeView.prototype.getFocusedNode = function () {
            var fNode = ej2_base_6.select('.' + LISTITEM + '.' + FOCUS, this.element);
            return ej2_base_7.isNullOrUndefined(fNode) ? ej2_base_6.select('.' + LISTITEM, this.element) : fNode;
        };
        TreeView.prototype.focusNextNode = function (li, isTowards) {
            var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);
            this.setFocus(li, nextNode);
            this.navigateToFocus(!isTowards);
        };
        TreeView.prototype.getNextNode = function (li) {
            var index = this.liList.indexOf(li);
            var nextNode;
            do {
                index++;
                nextNode = this.liList[index];
                if (ej2_base_7.isNullOrUndefined(nextNode)) {
                    return li;
                }
            } while (!ej2_base_6.isVisible(nextNode));
            return nextNode;
        };
        TreeView.prototype.getPrevNode = function (li) {
            var index = this.liList.indexOf(li);
            var prevNode;
            do {
                index--;
                prevNode = this.liList[index];
                if (ej2_base_7.isNullOrUndefined(prevNode)) {
                    return li;
                }
            } while (!ej2_base_6.isVisible(prevNode));
            return prevNode;
        };
        TreeView.prototype.getRootNode = function () {
            var index = 0;
            var rootNode;
            do {
                rootNode = this.liList[index];
                index++;
            } while (!ej2_base_6.isVisible(rootNode));
            return rootNode;
        };
        TreeView.prototype.getEndNode = function () {
            var index = this.liList.length - 1;
            var endNode;
            do {
                endNode = this.liList[index];
                index--;
            } while (!ej2_base_6.isVisible(endNode));
            return endNode;
        };
        TreeView.prototype.setFocus = function (preNode, nextNode) {
            ej2_base_6.removeClass([preNode], [HOVER, FOCUS]);
            ej2_base_6.addClass([nextNode], [HOVER, FOCUS]);
            this.updateIdAttr(preNode, nextNode);
        };
        TreeView.prototype.updateIdAttr = function (preNode, nextNode) {
            this.element.removeAttribute('aria-activedescendant');
            if (preNode) {
                preNode.removeAttribute('id');
            }
            nextNode.setAttribute('id', this.element.id + '_active');
            this.element.setAttribute('aria-activedescendant', this.element.id + '_active');
        };
        TreeView.prototype.focusIn = function () {
            if (!this.mouseDownStatus) {
                ej2_base_6.addClass([this.getFocusedNode()], HOVER);
            }
            this.mouseDownStatus = false;
        };
        TreeView.prototype.focusOut = function () {
            ej2_base_6.removeClass([this.getFocusedNode()], HOVER);
        };
        TreeView.prototype.onMouseOver = function (e) {
            var target = e.target;
            var classList = target.classList;
            var currentLi = ej2_base_6.closest(target, '.' + LISTITEM);
            if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {
                this.removeHover();
                return;
            }
            else {
                this.setHover(currentLi);
            }
        };
        TreeView.prototype.setHover = function (li) {
            if (!li.classList.contains(HOVER)) {
                this.removeHover();
                ej2_base_6.addClass([li], HOVER);
            }
        };
        ;
        TreeView.prototype.onMouseLeave = function (e) {
            this.removeHover();
        };
        TreeView.prototype.removeHover = function () {
            var hoveredNode = ej2_base_6.selectAll('.' + HOVER, this.element);
            if (hoveredNode && hoveredNode.length) {
                ej2_base_6.removeClass(hoveredNode, HOVER);
            }
        };
        ;
        TreeView.prototype.getNodeData = function (currLi, fromDS) {
            if (!ej2_base_7.isNullOrUndefined(currLi) && currLi.classList.contains(LISTITEM)) {
                var id = currLi.getAttribute('data-uid');
                var text = this.getText(currLi, fromDS);
                var pNode = ej2_base_6.closest(currLi.parentNode, '.' + LISTITEM);
                var pid = pNode ? pNode.getAttribute('data-uid') : null;
                var selected = currLi.classList.contains(ACTIVE);
                var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;
                var checked = null;
                if (this.showCheckBox) {
                    checked = ej2_base_6.select('.' + CHECKBOXWRAP, currLi).getAttribute('aria-checked');
                }
                return { id: id, text: text, parentID: pid, selected: selected, expanded: expanded, isChecked: checked };
            }
            return { id: '', text: '', parentID: '', selected: '', expanded: '', isChecked: '' };
        };
        TreeView.prototype.getText = function (currLi, fromDS) {
            if (fromDS) {
                var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));
                var level = parseFloat(currLi.getAttribute('aria-level'));
                var nodeFields = this.getFields(this.fields, level, 1);
                return ej2_base_7.getValue(nodeFields.text, nodeData);
            }
            return ej2_base_6.select('.' + LISTTEXT, currLi).textContent;
        };
        TreeView.prototype.getExpandEvent = function (currLi, e) {
            var nodeData = this.getNodeData(currLi);
            return { cancel: false, isInteracted: ej2_base_7.isNullOrUndefined(e) ? false : true, node: currLi, nodeData: nodeData };
        };
        TreeView.prototype.reRenderNodes = function () {
            this.element.innerHTML = '';
            this.setTouchClass();
            this.setProperties({ selectedNodes: [] }, true);
            this.isLoaded = false;
            this.setDataBinding();
        };
        TreeView.prototype.setCssClass = function (oldClass, newClass) {
            if (!ej2_base_7.isNullOrUndefined(oldClass) && oldClass !== '') {
                ej2_base_6.removeClass([this.element], oldClass.split(' '));
            }
            if (!ej2_base_7.isNullOrUndefined(newClass) && newClass !== '') {
                ej2_base_6.addClass([this.element], newClass.split(' '));
            }
        };
        TreeView.prototype.editingHandler = function (e) {
            var target = e.target;
            if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||
                target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||
                target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {
                return;
            }
            else {
                var liEle = ej2_base_6.closest(target, '.' + LISTITEM);
                this.createTextbox(liEle, e);
            }
        };
        TreeView.prototype.createTextbox = function (liEle, e) {
            var oldInpEle = ej2_base_6.select('.' + TREEINPUT, this.element);
            if (oldInpEle) {
                oldInpEle.blur();
            }
            var textEle = ej2_base_6.select('.' + LISTTEXT, liEle);
            this.updateOldText(liEle);
            var innerEle = ej2_base_6.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });
            var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);
            this.trigger('nodeEditing', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            var inpWidth = textEle.offsetWidth + 5;
            var style = 'width:' + inpWidth + 'px';
            ej2_base_6.addClass([liEle], EDITING);
            textEle.innerHTML = eventArgs.innerHtml;
            var inpEle = ej2_base_6.select('.' + TREEINPUT, textEle);
            this.inputObj = ej2_inputs_1.Input.createInput({
                element: inpEle,
                properties: {
                    enableRtl: this.enableRtl,
                }
            });
            this.inputObj.container.setAttribute('style', style);
            inpEle.focus();
            var inputEle = inpEle;
            inputEle.setSelectionRange(0, inputEle.value.length);
            this.wireInputEvents(inpEle);
        };
        TreeView.prototype.updateOldText = function (liEle) {
            var id = liEle.getAttribute('data-uid');
            this.editData = this.getNodeObject(id);
            var level = parseFloat(liEle.getAttribute('aria-level'));
            this.editFields = this.getFields(this.fields, level, 1);
            this.oldText = ej2_base_7.getValue(this.editFields.text, this.editData);
        };
        TreeView.prototype.inputFocusOut = function (e) {
            if (!ej2_base_6.select('.' + TREEINPUT, this.element)) {
                return;
            }
            var target = e.target;
            var newText = target.value;
            var txtEle = ej2_base_6.closest(target, '.' + LISTTEXT);
            var liEle = ej2_base_6.closest(target, '.' + LISTITEM);
            ej2_base_6.detach(this.inputObj.container);
            this.appendNewText(liEle, txtEle, newText, true);
        };
        TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {
            var newData = ej2_base_7.setValue(this.editFields.text, newText, this.editData);
            if (!ej2_base_7.isNullOrUndefined(this.nodeTemplateFn)) {
                txtEle.innerHTML = '';
                ej2_base_6.append(this.nodeTemplateFn(newData), txtEle);
            }
            else {
                txtEle.innerHTML = newText;
            }
            if (isInput) {
                ej2_base_6.removeClass([liEle], EDITING);
                txtEle.focus();
            }
            this.trigger('nodeEdited', this.getEditEvent(liEle, newText, null));
        };
        TreeView.prototype.getElement = function (ele) {
            if (ej2_base_7.isNullOrUndefined(ele)) {
                return null;
            }
            else if (typeof ele === 'string') {
                return this.element.querySelector('[data-uid="' + ele + '"]');
            }
            else if (typeof ele === 'object') {
                return ele;
            }
            else {
                return null;
            }
        };
        TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {
            var data = this.getNodeData(liEle);
            return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };
        };
        TreeView.prototype.getNodeObject = function (id) {
            var childNodes;
            if (ej2_base_7.isNullOrUndefined(id)) {
                return childNodes;
            }
            else if (this.dataType === 1) {
                for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {
                    var dataId = ej2_base_7.getValue(this.fields.id, this.treeData[i]);
                    if (!ej2_base_7.isNullOrUndefined(this.treeData[i]) && !ej2_base_7.isNullOrUndefined(dataId) && dataId.toString() === id) {
                        return this.treeData[i];
                    }
                }
            }
            else {
                return this.getChildNodeObject(this.treeData, this.fields, id);
            }
            return childNodes;
        };
        TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {
            var newList;
            if (ej2_base_7.isNullOrUndefined(obj)) {
                return newList;
            }
            for (var i = 0, objlen = obj.length; i < objlen; i++) {
                var dataId = ej2_base_7.getValue(mapper.id, obj[i]);
                if (obj[i] && dataId && dataId.toString() === id) {
                    return obj[i];
                }
                else if (typeof mapper.child === 'string' && !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue(mapper.child, obj[i]))) {
                    var childData = ej2_base_7.getValue(mapper.child, obj[i]);
                    newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);
                    if (newList !== undefined) {
                        break;
                    }
                }
                else if (this.fields.dataSource instanceof ej2_data_1.DataManager && !ej2_base_7.isNullOrUndefined(ej2_base_7.getValue('child', obj[i]))) {
                    var child = 'child';
                    newList = this.getChildNodeObject(ej2_base_7.getValue(child, obj[i]), this.getChildMapper(mapper), id);
                    if (newList !== undefined) {
                        break;
                    }
                }
            }
            return newList;
        };
        TreeView.prototype.setDragAndDrop = function (toBind) {
            if (toBind) {
                this.initializeDrag();
            }
            else {
                this.destroyDrag();
            }
        };
        TreeView.prototype.initializeDrag = function () {
            var _this = this;
            var virtualEle;
            this.dragObj = new ej2_base_5.Draggable(this.element, {
                enableTailMode: true,
                dragTarget: '.' + TEXTWRAP,
                helper: function (e) {
                    _this.dragTarget = e.sender.target;
                    var dragRoot = ej2_base_6.closest(_this.dragTarget, '.' + ROOT);
                    var dragWrap = ej2_base_6.closest(_this.dragTarget, '.' + TEXTWRAP);
                    _this.dragLi = ej2_base_6.closest(_this.dragTarget, '.' + LISTITEM);
                    if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {
                        dragWrap = _this.dragTarget.nextElementSibling;
                    }
                    if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||
                        _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||
                        _this.dragTarget.classList.contains(LISTITEM)) {
                        return false;
                    }
                    var cloneEle = (dragWrap.cloneNode(true));
                    if (ej2_base_7.isNullOrUndefined(ej2_base_6.select('div.' + ICON, cloneEle))) {
                        var icon = ej2_base_6.createElement('div', { className: ICON + ' ' + EXPANDABLE });
                        cloneEle.insertBefore(icon, cloneEle.children[0]);
                    }
                    var cssClass = DRAGITEM + ' ' + ROOT + ' ' + (_this.enableRtl ? RTL : '');
                    virtualEle = ej2_base_6.createElement('div', { className: cssClass });
                    virtualEle.appendChild(cloneEle);
                    var nLen = _this.selectedNodes.length;
                    if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {
                        var cNode = ej2_base_6.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });
                        virtualEle.appendChild(cNode);
                    }
                    document.body.appendChild(virtualEle);
                    document.body.style.cursor = '';
                    _this.dragData = _this.getNodeData(_this.dragLi);
                    return virtualEle;
                },
                dragStart: function (e) {
                    ej2_base_6.addClass([_this.element], DRAGGING);
                    var eventArgs = _this.getDragEvent(e.event, _this, null, e.target);
                    _this.trigger('nodeDragStart', eventArgs);
                    if (eventArgs.cancel) {
                        ej2_base_6.detach(virtualEle);
                        ej2_base_6.removeClass([_this.element], DRAGGING);
                    }
                    _this.dragStartAction = true;
                },
                drag: function (e) {
                    _this.dragObj.setProperties({ cursorAt: { top: (!ej2_base_7.isNullOrUndefined(e.event.targetTouches) || ej2_base_1.Browser.isDevice) ? 60 : -20 } });
                    _this.dragAction(e, virtualEle);
                },
                dragStop: function (e) {
                    ej2_base_6.removeClass([_this.element], DRAGGING);
                    _this.removeVirtualEle();
                    var dropTarget = e.target;
                    var dropRoot = (ej2_base_6.closest(dropTarget, '.' + DROPPABLE));
                    if (!dropTarget || !dropRoot || dropTarget.classList.contains(ROOT)) {
                        ej2_base_6.detach(e.helper);
                        document.body.style.cursor = '';
                    }
                    var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget);
                    _this.trigger('nodeDragStop', eventArgs);
                    if (eventArgs.cancel) {
                        ej2_base_6.detach(e.helper);
                        document.body.style.cursor = '';
                    }
                    _this.dragStartAction = false;
                }
            });
            this.dropObj = new ej2_base_5.Droppable(this.element, {
                out: function (e) {
                    if (!ej2_base_7.isNullOrUndefined(e) && !e.target.classList.contains(SIBLING)) {
                        document.body.style.cursor = 'not-allowed';
                    }
                },
                over: function (e) {
                    document.body.style.cursor = '';
                },
                drop: function (e) {
                    _this.dropAction(e);
                }
            });
        };
        TreeView.prototype.dragAction = function (e, virtualEle) {
            var dropRoot = ej2_base_6.closest(e.target, '.' + DROPPABLE);
            var dropWrap = ej2_base_6.closest(e.target, '.' + TEXTWRAP);
            var icon = ej2_base_6.select('div.' + ICON, virtualEle);
            ej2_base_6.removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);
            this.removeVirtualEle();
            document.body.style.cursor = '';
            var classList = e.target.classList;
            if (this.fullRowSelect && !dropWrap && !ej2_base_7.isNullOrUndefined(classList) && classList.contains(FULLROW)) {
                dropWrap = e.target.nextElementSibling;
            }
            if (dropRoot) {
                var dropLi = ej2_base_6.closest(e.target, '.' + LISTITEM);
                if (!dropRoot.classList.contains(ROOT) || (dropWrap &&
                    (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {
                    if (e && (e.event.offsetY < 7)) {
                        ej2_base_6.addClass([icon], DROPNEXT);
                        var virEle = ej2_base_6.createElement('div', { className: SIBLING });
                        var index = this.fullRowSelect ? (1) : (0);
                        dropLi.insertBefore(virEle, dropLi.children[index]);
                    }
                    else if (e && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10))) {
                        ej2_base_6.addClass([icon], DROPNEXT);
                        var virEle = ej2_base_6.createElement('div', { className: SIBLING });
                        var index = this.fullRowSelect ? (2) : (1);
                        dropLi.insertBefore(virEle, dropLi.children[index]);
                    }
                    else {
                        ej2_base_6.addClass([icon], DROPIN);
                    }
                }
                else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {
                    ej2_base_6.addClass([icon], DROPNEXT);
                    this.renderVirtualEle(e);
                }
                else if (e.target.classList.contains(SIBLING)) {
                    ej2_base_6.addClass([icon], DROPNEXT);
                }
                else {
                    ej2_base_6.addClass([icon], DROPOUT);
                }
            }
            else {
                ej2_base_6.addClass([icon], NODROP);
                document.body.style.cursor = 'not-allowed';
            }
            this.trigger('nodeDragging', this.getDragEvent(e.event, this, e.target, e.target));
        };
        TreeView.prototype.dropAction = function (e) {
            var offsetY = e.event.offsetY;
            var dropTarget = e.target;
            var dragObj = e.dragData.draggable.ej2_instances[0];
            var dragTarget = dragObj.dragTarget;
            var dragLi = (ej2_base_6.closest(dragTarget, '.' + LISTITEM));
            var dropLi = (ej2_base_6.closest(dropTarget, '.' + LISTITEM));
            ej2_base_6.detach(e.droppedElement);
            document.body.style.cursor = '';
            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
                return;
            }
            if (dragObj.allowMultiSelection && (dragLi.classList.contains(ACTIVE) || (offsetY < 7 ||
                (e.target.offsetHeight > 0 && offsetY > (e.target.offsetHeight - 10))))) {
                var sNodes = ej2_base_6.selectAll('.' + ACTIVE, dragObj.element);
                for (var i = 0; i < sNodes.length; i++) {
                    if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {
                        continue;
                    }
                    this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);
                }
            }
            else {
                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);
            }
            this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target));
        };
        TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {
            if (dropTarget.nodeName === 'LI') {
                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);
            }
            else {
                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);
            }
        };
        TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {
            var dropUl = ej2_base_6.closest(dropLi, '.' + PARENTITEM);
            var dragParentUl = ej2_base_6.closest(dragLi, '.' + PARENTITEM);
            var dragParentLi = ej2_base_6.closest(dragParentUl, '.' + LISTITEM);
            var pre;
            if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {
                pre = false;
            }
            else if (e.event.offsetY < 2) {
                pre = true;
            }
            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);
            this.updateElement(dragParentUl, dragParentLi);
            this.updateAriaLevel(dragLi);
            if (dragObj.element.id === this.element.id) {
                this.updateList();
            }
            else {
                dragObj.updateInstance();
                this.updateInstance();
            }
        };
        TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos) {
            var dragParentUl = ej2_base_6.closest(dragLi, '.' + PARENTITEM);
            var dragParentLi = ej2_base_6.closest(dragParentUl, '.' + LISTITEM);
            var dropParentUl = ej2_base_6.closest(dropLi, '.' + PARENTITEM);
            if (e && (pos < 7)) {
                dropParentUl.insertBefore(dragLi, dropLi);
            }
            else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10))) {
                dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);
            }
            else {
                var dropUl = this.expandParent(dropLi);
                dropUl.insertBefore(dragLi, dropUl.childNodes[index]);
            }
            this.updateElement(dragParentUl, dragParentLi);
            this.updateAriaLevel(dragLi);
            if (dragObj.element.id === this.element.id) {
                this.updateList();
            }
            else {
                dragObj.updateInstance();
                this.updateInstance();
            }
        };
        TreeView.prototype.expandParent = function (dropLi) {
            var dropIcon = ej2_base_6.select('div.' + ICON, dropLi);
            if (dropIcon && dropIcon.classList.contains(EXPANDABLE)) {
                this.expandAction(dropLi, dropIcon, null);
            }
            var dropUl = ej2_base_6.select('.' + PARENTITEM, dropLi);
            if (ej2_base_7.isNullOrUndefined(dropUl)) {
                ej2_lists_1.ListBase.generateIcon(dropLi, COLLAPSIBLE, this.listBaseOption);
                var icon = ej2_base_6.select('div.' + ICON, dropLi);
                ej2_base_6.removeClass([icon], EXPANDABLE);
                dropUl = ej2_lists_1.ListBase.generateUL([], null, this.listBaseOption);
                dropLi.appendChild(dropUl);
                dropLi.setAttribute('aria-expanded', 'true');
                ej2_base_6.removeClass([dropLi], NODECOLLAPSED);
            }
            return dropUl;
        };
        TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {
            if (dragParentLi && dragParentUl.childElementCount === 0) {
                var dragIcon = ej2_base_6.select('div.' + ICON, dragParentLi);
                ej2_base_6.detach(dragParentUl);
                ej2_base_6.detach(dragIcon);
                dragParentLi.removeAttribute('aria-expanded');
            }
        };
        TreeView.prototype.updateAriaLevel = function (dragLi) {
            var level = this.parents(dragLi, '.' + PARENTITEM).length;
            dragLi.setAttribute('aria-level', '' + level);
            this.updateChildAriaLevel(ej2_base_6.select('.' + PARENTITEM, dragLi), level + 1);
        };
        TreeView.prototype.updateChildAriaLevel = function (element, level) {
            if (!ej2_base_7.isNullOrUndefined(element)) {
                var cNodes = element.childNodes;
                for (var i = 0, len = cNodes.length; i < len; i++) {
                    var liEle = cNodes[i];
                    liEle.setAttribute('aria-level', '' + level);
                    this.updateChildAriaLevel(ej2_base_6.select('.' + PARENTITEM, liEle), level + 1);
                }
            }
        };
        TreeView.prototype.renderVirtualEle = function (e) {
            var pre;
            if (e.event.offsetY > e.target.offsetHeight - 2) {
                pre = false;
            }
            else if (e.event.offsetY < 2) {
                pre = true;
            }
            var virEle = ej2_base_6.createElement('div', { className: SIBLING });
            var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);
            e.target.insertBefore(virEle, e.target.children[index]);
        };
        TreeView.prototype.removeVirtualEle = function () {
            var sibEle = ej2_base_6.select('.' + SIBLING);
            if (sibEle) {
                ej2_base_6.detach(sibEle);
            }
        };
        TreeView.prototype.destroyDrag = function () {
            if (this.dragObj && this.dropObj) {
                this.dragObj.destroy();
                this.dropObj.destroy();
            }
        };
        TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target) {
            var dropLi = dropTarget ? ej2_base_6.closest(dropTarget, '.' + LISTITEM) : null;
            var dropData = dropLi ? this.getNodeData(dropLi) : null;
            return {
                cancel: false,
                event: event,
                draggedNode: obj.dragLi,
                draggedNodeData: obj.dragData,
                droppedNode: dropLi,
                droppedNodeData: dropData,
                target: target
            };
        };
        TreeView.prototype.addFullRow = function (toAdd) {
            var len = this.liList.length;
            if (toAdd) {
                for (var i = 0; i < len; i++) {
                    this.createFullRow(this.liList[i]);
                }
            }
            else {
                for (var i = 0; i < len; i++) {
                    var rowDiv = ej2_base_6.select('.' + FULLROW, this.liList[i]);
                    ej2_base_6.detach(rowDiv);
                }
            }
        };
        TreeView.prototype.createFullRow = function (item) {
            var rowDiv = ej2_base_6.createElement('div', { className: FULLROW });
            item.insertBefore(rowDiv, item.childNodes[0]);
        };
        TreeView.prototype.addMultiSelect = function (toAdd) {
            if (toAdd) {
                var liEles = ej2_base_6.selectAll('.' + LISTITEM + ':not([aria-selected="true"])', this.element);
                for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {
                    var ele = liEles_1[_i];
                    ele.setAttribute('aria-selected', 'false');
                }
            }
            else {
                var liEles = ej2_base_6.selectAll('.' + LISTITEM + '[aria-selected="false"]', this.element);
                for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {
                    var ele = liEles_2[_a];
                    ele.removeAttribute('aria-selected');
                }
            }
        };
        TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {
            if (level > 0 && !ej2_base_7.isNullOrUndefined(element)) {
                var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
                for (var i = 0, len = cNodes.length; i < len; i++) {
                    var liEle = cNodes[i];
                    var icon = ej2_base_6.select('.' + COLLAPSIBLE, ej2_base_6.select('.' + TEXTWRAP, liEle));
                    if (!ej2_base_7.isNullOrUndefined(icon)) {
                        this.collapseNode(liEle, icon, null);
                    }
                    this.collapseByLevel(ej2_base_6.select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
                }
            }
        };
        TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {
            var cIcons = this.getVisibleNodes(excludeHiddenNodes, ej2_base_6.selectAll('.' + COLLAPSIBLE, this.element));
            for (var i = 0, len = cIcons.length; i < len; i++) {
                var icon = cIcons[i];
                var liEle = ej2_base_6.closest(icon, '.' + LISTITEM);
                this.collapseNode(liEle, icon, null);
            }
        };
        TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {
            if (level > 0 && !ej2_base_7.isNullOrUndefined(element)) {
                var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);
                for (var i = 0, len = eNodes.length; i < len; i++) {
                    var liEle = eNodes[i];
                    var icon = ej2_base_6.select('.' + EXPANDABLE, ej2_base_6.select('.' + TEXTWRAP, liEle));
                    if (!ej2_base_7.isNullOrUndefined(icon)) {
                        this.expandAction(liEle, icon, null);
                    }
                    this.expandByLevel(ej2_base_6.select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);
                }
            }
        };
        TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {
            var eIcons = this.getVisibleNodes(excludeHiddenNodes, ej2_base_6.selectAll('.' + EXPANDABLE, this.element));
            for (var i = 0, len = eIcons.length; i < len; i++) {
                var icon = eIcons[i];
                var liEle = ej2_base_6.closest(icon, '.' + LISTITEM);
                this.expandAction(liEle, icon, null, true);
            }
        };
        TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {
            var vNodes = Array.prototype.slice.call(nodes);
            if (excludeHiddenNodes) {
                for (var i = 0; i < vNodes.length; i++) {
                    if (!ej2_base_6.isVisible(vNodes[i])) {
                        vNodes.splice(i, 1);
                        i--;
                    }
                }
            }
            return vNodes;
        };
        TreeView.prototype.removeNode = function (node) {
            var dragParentUl = ej2_base_6.closest(node, '.' + PARENTITEM);
            var dragParentLi = ej2_base_6.closest(dragParentUl, '.' + LISTITEM);
            ej2_base_6.detach(node);
            this.updateElement(dragParentUl, dragParentLi);
            this.updateInstance();
        };
        TreeView.prototype.updateInstance = function () {
            this.updateList();
            this.updateSelectedNodes();
        };
        TreeView.prototype.updateList = function () {
            this.liList = Array.prototype.slice.call(ej2_base_6.selectAll('.' + LISTITEM, this.element));
        };
        TreeView.prototype.updateSelectedNodes = function () {
            this.setProperties({ selectedNodes: [] }, true);
            var sNodes = ej2_base_6.selectAll('.' + ACTIVE, this.element);
            this.selectGivenNodes(sNodes);
        };
        TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                if (ej2_base_7.isNullOrUndefined(liEle)) {
                    continue;
                }
                var icon = ej2_base_6.select('.' + selector, ej2_base_6.select('.' + TEXTWRAP, liEle));
                if (!ej2_base_7.isNullOrUndefined(icon)) {
                    toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);
                }
            }
        };
        TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote) {
            var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;
            if (isRemote) {
                this.updateMapper(level);
            }
            var li = ej2_lists_1.ListBase.createListItemFromJson(nodes, this.listBaseOption, level);
            var dropUl = dropLi ? this.expandParent(dropLi) : ej2_base_6.select('.' + PARENTITEM, this.element);
            var refNode = dropUl.childNodes[index];
            for (var i = 0; i < li.length; i++) {
                dropUl.insertBefore(li[i], refNode);
            }
            this.finalizeNode(dropUl);
        };
        TreeView.prototype.updateMapper = function (level) {
            var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);
            var prop = this.getActualProperties(mapper);
            this.listBaseOption.fields = prop;
            this.listBaseOption.fields.url = prop.navigateUrl;
        };
        TreeView.prototype.doDisableAction = function (nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                if (ej2_base_7.isNullOrUndefined(liEle)) {
                    continue;
                }
                liEle.setAttribute('aria-disabled', 'true');
                ej2_base_6.addClass([liEle], DISABLE);
            }
        };
        TreeView.prototype.doEnableAction = function (nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var liEle = this.getElement(nodes[i]);
                if (ej2_base_7.isNullOrUndefined(liEle)) {
                    continue;
                }
                liEle.removeAttribute('aria-disabled');
                ej2_base_6.removeClass([liEle], DISABLE);
            }
        };
        TreeView.prototype.setTouchClass = function () {
            var ele = ej2_base_6.closest(this.element, '.' + BIGGER);
            this.touchClass = ej2_base_7.isNullOrUndefined(ele) ? '' : SMALL;
        };
        TreeView.prototype.wireInputEvents = function (inpEle) {
            ej2_base_3.EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);
        };
        TreeView.prototype.wireEditingEvents = function (toBind) {
            if (toBind) {
                var proxy_1 = this;
                this.touchEditObj = new ej2_base_7.Touch(this.element, {
                    tap: function (e) {
                        if (e.tapCount === 2) {
                            e.originalEvent.preventDefault();
                            proxy_1.editingHandler(e.originalEvent);
                        }
                    }
                });
            }
            else {
                if (this.touchEditObj) {
                    this.touchEditObj.destroy();
                }
            }
        };
        TreeView.prototype.wireClickEvent = function (toBind) {
            if (toBind) {
                var proxy_2 = this;
                this.touchClickObj = new ej2_base_7.Touch(this.element, {
                    tap: function (e) {
                        proxy_2.clickHandler(e.originalEvent);
                    }
                });
            }
            else {
                if (this.touchClickObj) {
                    this.touchClickObj.destroy();
                }
            }
        };
        TreeView.prototype.wireExpandOnEvent = function (toBind) {
            var _this = this;
            if (toBind) {
                var proxy_3 = this;
                this.touchExpandObj = new ej2_base_7.Touch(this.element, {
                    tap: function (e) {
                        if (_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && e.tapCount === 2)) {
                            proxy_3.expandHandler(e.originalEvent);
                        }
                    }
                });
            }
            else {
                if (this.touchExpandObj) {
                    this.touchExpandObj.destroy();
                }
            }
        };
        TreeView.prototype.mouseDownHandler = function (e) {
            this.mouseDownStatus = true;
            if (e.shiftKey || e.ctrlKey) {
                e.preventDefault();
            }
            if (e.ctrlKey && this.allowMultiSelection) {
                ej2_base_3.EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);
            }
        };
        ;
        TreeView.prototype.preventContextMenu = function (e) {
            e.preventDefault();
        };
        TreeView.prototype.wireEvents = function () {
            ej2_base_3.EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);
            this.wireClickEvent(true);
            this.wireExpandOnEvent(true);
            ej2_base_3.EventHandler.add(this.element, 'focus', this.focusIn, this);
            ej2_base_3.EventHandler.add(this.element, 'blur', this.focusOut, this);
            ej2_base_3.EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);
            ej2_base_3.EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);
            this.keyboardModule = new ej2_base_3.KeyboardEvents(this.element, {
                keyAction: this.keyActionHandler.bind(this),
                keyConfigs: this.keyConfigs,
                eventName: 'keydown',
            });
        };
        TreeView.prototype.unWireEvents = function () {
            ej2_base_3.EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);
            this.wireClickEvent(false);
            this.wireExpandOnEvent(false);
            ej2_base_3.EventHandler.remove(this.element, 'focus', this.focusIn);
            ej2_base_3.EventHandler.remove(this.element, 'blur', this.focusOut);
            ej2_base_3.EventHandler.remove(this.element, 'mouseover', this.onMouseOver);
            ej2_base_3.EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);
            this.keyboardModule.destroy();
        };
        TreeView.prototype.parents = function (element, selector) {
            var matched = [];
            var el = element.parentNode;
            while (!ej2_base_7.isNullOrUndefined(el)) {
                if (ej2_base_6.matches(el, selector)) {
                    matched.push(el);
                }
                el = el.parentNode;
            }
            return matched;
        };
        TreeView.prototype.isDescendant = function (parent, child) {
            var node = child.parentNode;
            while (!ej2_base_7.isNullOrUndefined(node)) {
                if (node === parent) {
                    return true;
                }
                node = node.parentNode;
            }
            return false;
        };
        TreeView.prototype.showSpinner = function (element) {
            ej2_base_6.addClass([element], LOAD);
            ej2_popups_1.createSpinner({
                target: element,
                width: ej2_base_1.Browser.isDevice ? 16 : 14
            });
            ej2_popups_1.showSpinner(element);
        };
        TreeView.prototype.hideSpinner = function (element) {
            ej2_popups_1.hideSpinner(element);
            element.innerHTML = '';
            ej2_base_6.removeClass([element], LOAD);
        };
        TreeView.prototype.setCheckedNodes = function (nodes) {
            nodes = JSON.parse(JSON.stringify(nodes));
            this.uncheckAll();
            if (nodes.length > 0) {
                this.checkAll(nodes);
            }
        };
        TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'allowDragAndDrop':
                        this.setDragAndDrop(this.allowDragAndDrop);
                        break;
                    case 'allowEditing':
                        this.wireEditingEvents(this.allowEditing);
                        break;
                    case 'allowMultiSelection':
                        if (this.selectedNodes.length > 1) {
                            var sNode = this.getElement(this.selectedNodes[0]);
                            this.isLoaded = false;
                            this.removeSelectAll();
                            this.selectNode(sNode, null);
                            this.isLoaded = true;
                        }
                        this.setMultiSelect(this.allowMultiSelection);
                        this.addMultiSelect(this.allowMultiSelection);
                        break;
                    case 'checkedNodes':
                        if (this.showCheckBox) {
                            this.checkedNodes = oldProp.checkedNodes;
                            this.setCheckedNodes(newProp.checkedNodes);
                        }
                        break;
                    case 'cssClass':
                        this.setCssClass(oldProp.cssClass, newProp.cssClass);
                        break;
                    case 'enableRtl':
                        this.setEnableRtl();
                        break;
                    case 'expandOn':
                        this.wireExpandOnEvent(false);
                        this.setExpandOnType();
                        this.wireExpandOnEvent(true);
                        break;
                    case 'fields':
                        this.listBaseOption.fields = this.fields.properties;
                        this.listBaseOption.fields.url = this.fields.navigateUrl;
                        this.reRenderNodes();
                        break;
                    case 'fullRowSelect':
                        this.setFullRow(this.fullRowSelect);
                        this.addFullRow(this.fullRowSelect);
                        break;
                    case 'nodeTemplate':
                        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);
                        this.reRenderNodes();
                        break;
                    case 'selectedNodes':
                        this.removeSelectAll();
                        this.setProperties({ selectedNodes: newProp.selectedNodes }, true);
                        this.doSelectionAction();
                        break;
                    case 'showCheckBox':
                        this.reRenderNodes();
                        break;
                    case 'sortOrder':
                        this.reRenderNodes();
                        break;
                }
            }
        };
        TreeView.prototype.destroy = function () {
            this.element.removeAttribute('aria-activedescendant');
            this.element.removeAttribute('tabindex');
            this.unWireEvents();
            this.wireEditingEvents(false);
            this.rippleFn();
            this.rippleIconFn();
            this.setCssClass(this.cssClass, null);
            this.setDragAndDrop(false);
            this.setFullRow(false);
            this.element.innerHTML = '';
            _super.prototype.destroy.call(this);
        };
        TreeView.prototype.addNodes = function (nodes, target, index) {
            if (ej2_base_7.isNullOrUndefined(nodes)) {
                return;
            }
            var dropLi = this.getElement(target);
            nodes = this.getSortedData(nodes);
            if (this.fields.dataSource instanceof ej2_data_1.DataManager) {
                this.addGivenNodes(nodes, dropLi, index, true);
            }
            else if (this.dataType === 2) {
                this.addGivenNodes(nodes, dropLi, index);
            }
            else {
                if (dropLi) {
                    this.addGivenNodes(nodes, dropLi, index);
                }
                else {
                    for (var i = 0; i < nodes.length; i++) {
                        var pid = ej2_base_7.getValue(this.fields.parentID, nodes[i]);
                        dropLi = pid ? this.getElement(pid.toString()) : pid;
                        this.addGivenNodes([nodes[i]], dropLi, index);
                    }
                }
            }
        };
        TreeView.prototype.beginEdit = function (node) {
            var ele = this.getElement(node);
            if (!ej2_base_7.isNullOrUndefined(ele) && this.allowEditing) {
                this.createTextbox(ele, null);
            }
        };
        TreeView.prototype.checkAll = function (nodes) {
            if (this.showCheckBox) {
                this.doCheckBoxAction(nodes, true);
            }
        };
        TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                this.doGivenAction(nodes, COLLAPSIBLE, false);
            }
            else {
                if (level > 0) {
                    this.collapseByLevel(ej2_base_6.select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
                }
                else {
                    this.collapseAllNodes(excludeHiddenNodes);
                }
            }
        };
        TreeView.prototype.disableNodes = function (nodes) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                this.doDisableAction(nodes);
            }
        };
        TreeView.prototype.enableNodes = function (nodes) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                this.doEnableAction(nodes);
            }
        };
        TreeView.prototype.ensureVisible = function (node) {
            var liEle = this.getElement(node);
            if (ej2_base_7.isNullOrUndefined(liEle)) {
                return;
            }
            var parents = this.parents(liEle, '.' + LISTITEM);
            this.expandAll(parents);
            setTimeout(function () { liEle.scrollIntoView(true); }, 450);
        };
        TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                this.doGivenAction(nodes, EXPANDABLE, true);
            }
            else {
                if (level > 0) {
                    this.expandByLevel(ej2_base_6.select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);
                }
                else {
                    this.expandAllNodes(excludeHiddenNodes);
                }
            }
        };
        TreeView.prototype.getNode = function (node) {
            var ele = this.getElement(node);
            return this.getNodeData(ele, true);
        };
        TreeView.prototype.moveNodes = function (sourceNodes, target, index) {
            var dropLi = this.getElement(target);
            if (ej2_base_7.isNullOrUndefined(dropLi)) {
                return;
            }
            for (var i = 0; i < sourceNodes.length; i++) {
                var dragLi = this.getElement(sourceNodes[i]);
                if (ej2_base_7.isNullOrUndefined(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {
                    continue;
                }
                this.dropAsChildNode(dragLi, dropLi, this, index);
            }
        };
        TreeView.prototype.removeNodes = function (nodes) {
            if (!ej2_base_7.isNullOrUndefined(nodes)) {
                for (var i = 0, len = nodes.length; i < len; i++) {
                    var liEle = this.getElement(nodes[i]);
                    if (ej2_base_7.isNullOrUndefined(liEle)) {
                        continue;
                    }
                    this.removeNode(liEle);
                }
            }
        };
        TreeView.prototype.updateNode = function (target, newText) {
            if (ej2_base_7.isNullOrUndefined(target) || ej2_base_7.isNullOrUndefined(newText) || !this.allowEditing) {
                return;
            }
            var liEle = this.getElement(target);
            if (ej2_base_7.isNullOrUndefined(liEle)) {
                return;
            }
            var txtEle = ej2_base_6.select('.' + LISTTEXT, liEle);
            this.updateOldText(liEle);
            var eventArgs = this.getEditEvent(liEle, null, null);
            this.trigger('nodeEditing', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            this.appendNewText(liEle, txtEle, newText, false);
        };
        TreeView.prototype.uncheckAll = function (nodes) {
            if (this.showCheckBox) {
                this.doCheckBoxAction(nodes, false);
            }
        };
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "allowDragAndDrop", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "allowEditing", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "allowMultiSelection", void 0);
        __decorate([
            ej2_base_2.Complex({}, NodeAnimationSettings)
        ], TreeView.prototype, "animation", void 0);
        __decorate([
            ej2_base_2.Property()
        ], TreeView.prototype, "checkedNodes", void 0);
        __decorate([
            ej2_base_2.Property('')
        ], TreeView.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "enablePersistence", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "enableRtl", void 0);
        __decorate([
            ej2_base_2.Property('Auto')
        ], TreeView.prototype, "expandOn", void 0);
        __decorate([
            ej2_base_2.Complex({}, FieldsSettings)
        ], TreeView.prototype, "fields", void 0);
        __decorate([
            ej2_base_2.Property(true)
        ], TreeView.prototype, "fullRowSelect", void 0);
        __decorate([
            ej2_base_2.Property()
        ], TreeView.prototype, "nodeTemplate", void 0);
        __decorate([
            ej2_base_2.Property()
        ], TreeView.prototype, "selectedNodes", void 0);
        __decorate([
            ej2_base_2.Property('None')
        ], TreeView.prototype, "sortOrder", void 0);
        __decorate([
            ej2_base_2.Property(false)
        ], TreeView.prototype, "showCheckBox", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "created", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "dataBound", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "drawNode", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "destroyed", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "keyPress", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeChecked", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeChecking", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeClicked", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeCollapsed", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeCollapsing", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeDragging", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeDragStart", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeDragStop", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeDropped", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeEdited", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeEditing", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeExpanded", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeExpanding", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeSelected", void 0);
        __decorate([
            ej2_base_3.Event()
        ], TreeView.prototype, "nodeSelecting", void 0);
        TreeView = __decorate([
            ej2_base_2.NotifyPropertyChanges
        ], TreeView);
        return TreeView;
    }(ej2_base_1.Component));
    exports.TreeView = TreeView;
});
