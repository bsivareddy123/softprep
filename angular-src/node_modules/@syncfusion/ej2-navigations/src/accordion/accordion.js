var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base", "@syncfusion/ej2-base"], function (require, exports, ej2_base_1, ej2_base_2, ej2_base_3, ej2_base_4, ej2_base_5, ej2_base_6) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var CLS_ACRDN_ROOT = 'e-acrdn-root';
    var CLS_ROOT = 'e-accordion';
    var CLS_ITEM = 'e-acrdn-item';
    var CLS_ITEMFOCUS = 'e-item-focus';
    var CLS_ITEMHIDE = 'e-hide';
    var CLS_HEADER = 'e-acrdn-header';
    var CLS_HEADERICN = 'e-acrdn-header-icon';
    var CLS_HEADERCTN = 'e-acrdn-header-content';
    var CLS_CONTENT = 'e-acrdn-panel';
    var CLS_CTENT = 'e-acrdn-content';
    var CLS_TOOGLEICN = 'e-toggle-icon';
    var CLS_COLLAPSEICN = 'e-tgl-collapse-icon e-icons';
    var CLS_EXPANDICN = 'e-expand-icon';
    var CLS_RTL = 'e-rtl';
    var CLS_CTNHIDE = 'e-content-hide';
    var CLS_SLCT = 'e-select';
    var CLS_SLCTED = 'e-selected';
    var CLS_ACTIVE = 'e-active';
    var CLS_ANIMATE = 'e-animate';
    var CLS_DISABLE = 'e-overlay';
    var CLS_TOGANIMATE = 'e-toggle-animation';
    var CLS_NEST = 'e-nested';
    var CLS_EXPANDSTATE = 'e-expand-state';
    var AccordionActionSettings = (function (_super) {
        __extends(AccordionActionSettings, _super);
        function AccordionActionSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property('SlideDown')
        ], AccordionActionSettings.prototype, "effect", void 0);
        __decorate([
            ej2_base_1.Property(400)
        ], AccordionActionSettings.prototype, "duration", void 0);
        __decorate([
            ej2_base_1.Property('linear')
        ], AccordionActionSettings.prototype, "easing", void 0);
        return AccordionActionSettings;
    }(ej2_base_4.ChildProperty));
    exports.AccordionActionSettings = AccordionActionSettings;
    var AccordionAnimationSettings = (function (_super) {
        __extends(AccordionAnimationSettings, _super);
        function AccordionAnimationSettings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_5.Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, AccordionActionSettings)
        ], AccordionAnimationSettings.prototype, "collapse", void 0);
        __decorate([
            ej2_base_5.Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, AccordionActionSettings)
        ], AccordionAnimationSettings.prototype, "expand", void 0);
        return AccordionAnimationSettings;
    }(ej2_base_4.ChildProperty));
    exports.AccordionAnimationSettings = AccordionAnimationSettings;
    var AccordionItem = (function (_super) {
        __extends(AccordionItem, _super);
        function AccordionItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        __decorate([
            ej2_base_1.Property(undefined)
        ], AccordionItem.prototype, "content", void 0);
        __decorate([
            ej2_base_1.Property(undefined)
        ], AccordionItem.prototype, "header", void 0);
        __decorate([
            ej2_base_1.Property(undefined)
        ], AccordionItem.prototype, "cssClass", void 0);
        __decorate([
            ej2_base_1.Property(undefined)
        ], AccordionItem.prototype, "iconCss", void 0);
        __decorate([
            ej2_base_1.Property(false)
        ], AccordionItem.prototype, "expanded", void 0);
        return AccordionItem;
    }(ej2_base_4.ChildProperty));
    exports.AccordionItem = AccordionItem;
    var Accordion = (function (_super) {
        __extends(Accordion, _super);
        function Accordion(options, element) {
            var _this = _super.call(this, options, element) || this;
            _this.keyConfigs = {
                moveUp: 'uparrow',
                moveDown: 'downarrow',
                enter: 'enter',
                space: 'space',
                home: 'home',
                end: 'end',
            };
            return _this;
        }
        Accordion.prototype.destroy = function () {
            var _this = this;
            var ele = this.element;
            _super.prototype.destroy.call(this);
            this.unwireEvents();
            this.isDestroy = true;
            this.templateEle.forEach(function (eleStr) {
                document.body.appendChild(_this.element.querySelector(eleStr)).style.display = 'none';
            });
            while (ele.firstChild) {
                ele.removeChild(ele.firstChild);
            }
            if (this.trgtEle) {
                while (this.ctrlTem.firstChild) {
                    ele.appendChild(this.ctrlTem.firstChild);
                }
            }
            ele.removeAttribute('style');
            ['aria-disabled', 'aria-multiselectable', 'role'].forEach(function (attrb) {
                _this.element.removeAttribute(attrb);
            });
        };
        Accordion.prototype.preRender = function () {
            var nested = ej2_base_3.closest(this.element, '.' + CLS_CONTENT);
            this.isNested = false;
            this.templateEle = [];
            if (!this.isDestroy) {
                this.isDestroy = false;
            }
            if (!ej2_base_6.isNullOrUndefined(nested)) {
                nested.classList.add(CLS_NEST);
                this.isNested = true;
            }
            else {
                this.element.classList.add(CLS_ACRDN_ROOT);
            }
            if (this.enableRtl) {
                this.add(this.element, CLS_RTL);
            }
            if (!this.enablePersistence || ej2_base_6.isNullOrUndefined(this.expandedItems)) {
                this.expandedItems = [];
            }
        };
        Accordion.prototype.add = function (ele, val) {
            ele.classList.add(val);
        };
        Accordion.prototype.remove = function (ele, val) {
            ele.classList.remove(val);
        };
        Accordion.prototype.render = function () {
            this.initialize();
            this.renderControl();
            this.wireEvents();
        };
        Accordion.prototype.initialize = function () {
            var width = ej2_base_6.formatUnit(this.width);
            var height = ej2_base_6.formatUnit(this.height);
            ej2_base_5.setStyleAttribute(this.element, { 'width': width, 'height': height });
            var ariaAttr = {
                'aria-disabled': 'false', 'role': 'presentation', 'aria-multiselectable': 'true'
            };
            if (this.expandedItems.length > 0) {
                this.initExpand = this.expandedItems;
            }
            ej2_base_3.attributes(this.element, ariaAttr);
            if (this.expandMode === 'Single') {
                this.element.setAttribute('aria-multiselectable', 'false');
            }
        };
        Accordion.prototype.renderControl = function () {
            this.trgtEle = (this.element.children.length > 0) ? ej2_base_3.select('div', this.element) : null;
            this.renderItems();
            this.initItemExpand();
        };
        Accordion.prototype.unwireEvents = function () {
            ej2_base_1.EventHandler.remove(this.element, 'click', this.clickHandler);
            if (!ej2_base_6.isNullOrUndefined(this.keyModule)) {
                this.keyModule.destroy();
            }
        };
        Accordion.prototype.wireEvents = function () {
            ej2_base_1.EventHandler.add(this.element, 'click', this.clickHandler, this);
            if (!this.isNested && !this.isDestroy) {
                ej2_base_1.rippleEffect(this.element, { selector: '.' + CLS_HEADER });
            }
            if (!this.isNested) {
                this.keyModule = new ej2_base_1.KeyboardEvents(this.element, {
                    keyAction: this.keyActionHandler.bind(this),
                    keyConfigs: this.keyConfigs,
                    eventName: 'keydown'
                });
            }
        };
        Accordion.prototype.focusIn = function (e) {
            e.target.parentElement.classList.add(CLS_ITEMFOCUS);
        };
        Accordion.prototype.focusOut = function (e) {
            e.target.parentElement.classList.remove(CLS_ITEMFOCUS);
        };
        Accordion.prototype.ctrlTemplate = function () {
            var _this = this;
            this.ctrlTem = this.element.cloneNode(true);
            var innerEles = this.element.children;
            var content;
            ej2_base_3.addClass(innerEles, [CLS_ITEM]);
            [].slice.call(innerEles).forEach(function (el) {
                el.id = ej2_base_2.getUniqueID('acrdn_item');
                if (el.children.length > 0) {
                    _this.add(el.children[0], CLS_HEADER);
                    var header = el.children[0];
                    ej2_base_3.attributes(header, { 'tabindex': '0', 'role': 'heading', 'aria-level': innerEles.length.toString() });
                    header.id = ej2_base_2.getUniqueID('acrdn_header');
                    ej2_base_1.EventHandler.add(header, 'focus', _this.focusIn, _this);
                    ej2_base_1.EventHandler.add(header, 'blur', _this.focusOut, _this);
                    var headerEle = header.firstElementChild;
                    if (headerEle) {
                        headerEle.classList.add(CLS_HEADERCTN);
                    }
                    content = el.children[1];
                    if (content) {
                        content.id = ej2_base_2.getUniqueID('acrdn_panel');
                        header.setAttribute('aria-controls', content.id);
                        content.style.display = '';
                        el.classList.add(CLS_SLCT);
                        el.children[0].appendChild(_this.toggleIconGenerate());
                        ej2_base_3.classList(content, [CLS_CONTENT, CLS_CTNHIDE], []);
                        ej2_base_3.attributes(content, { 'aria-labelledby': header.id, 'aria-hidden': 'true' });
                        content = content.firstElementChild;
                        if (content) {
                            content.classList.add(CLS_CTENT);
                            content.style.display = '';
                        }
                    }
                }
            });
        };
        Accordion.prototype.toggleIconGenerate = function () {
            var tglIcon = ej2_base_5.createElement('div', { className: CLS_TOOGLEICN });
            var hdrColIcon = ej2_base_5.createElement('span', { className: CLS_COLLAPSEICN });
            tglIcon.appendChild(hdrColIcon);
            return tglIcon;
        };
        Accordion.prototype.initItemExpand = function () {
            var len = this.initExpand.length;
            if (len === 0) {
                return;
            }
            if (this.expandMode === 'Single') {
                this.expandItem(true, this.initExpand[len - 1]);
            }
            else {
                for (var i = 0; i < len; i++) {
                    this.expandItem(true, this.initExpand[i]);
                }
            }
        };
        Accordion.prototype.renderItems = function () {
            var _this = this;
            var ele = this.element;
            var innerItem;
            if (ej2_base_6.isNullOrUndefined(this.initExpand)) {
                this.initExpand = [];
            }
            var items = this.items;
            if (!ej2_base_6.isNullOrUndefined(this.trgtEle)) {
                this.ctrlTemplate();
            }
            else if (ele && items.length > 0) {
                items.forEach(function (item, index) {
                    innerItem = _this.renderInnerItem(item, index);
                    ele.appendChild(innerItem);
                    if (innerItem.childElementCount > 0) {
                        ej2_base_1.EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'focus', _this.focusIn, _this);
                        ej2_base_1.EventHandler.add(innerItem.querySelector('.' + CLS_HEADER), 'blur', _this.focusOut, _this);
                    }
                });
            }
        };
        Accordion.prototype.clickHandler = function (e) {
            var _this = this;
            var trgt = e.target;
            var eventArgs = {};
            var index;
            var tglIcon;
            var acrdEle = ej2_base_3.closest(trgt, '.' + CLS_ROOT);
            if (acrdEle !== this.element) {
                return;
            }
            trgt.classList.add('e-target');
            var acrdnItem = ej2_base_3.closest(trgt, '.' + CLS_ITEM);
            var acrdnHdr = ej2_base_3.closest(trgt, '.' + CLS_HEADER);
            var acrdnCtn = ej2_base_3.closest(trgt, '.' + CLS_CONTENT);
            if (acrdnItem && (ej2_base_6.isNullOrUndefined(acrdnHdr) || ej2_base_6.isNullOrUndefined(acrdnCtn))) {
                acrdnHdr = acrdnItem.children[0];
                acrdnCtn = acrdnItem.children[1];
            }
            if (acrdnHdr) {
                tglIcon = ej2_base_3.select('.' + CLS_TOOGLEICN, acrdnHdr);
            }
            var acrdnCtnItem;
            if (acrdnCtn) {
                acrdnCtnItem = ej2_base_3.closest(acrdnCtn, '.' + CLS_ITEM);
            }
            var acrdActive = [];
            index = this.getIndexByItem(acrdnItem);
            if (acrdnCtnItem) {
                eventArgs.item = this.items[this.getIndexByItem(acrdnCtnItem)];
            }
            eventArgs.originalEvent = e;
            var ctnCheck = !ej2_base_6.isNullOrUndefined(tglIcon) && ej2_base_6.isNullOrUndefined(this.trgtEle) && acrdnItem.childElementCount <= 1;
            if (ctnCheck && (ej2_base_6.isNullOrUndefined(acrdnCtn) || !ej2_base_6.isNullOrUndefined(ej2_base_3.select('.' + CLS_HEADER + ' .' + CLS_TOOGLEICN, acrdnCtnItem)))) {
                acrdnItem.appendChild(this.contentRendering(index));
                this.ariaAttrUpdate(acrdnItem);
            }
            this.trigger('clicked', eventArgs);
            var cntclkCheck = (acrdnCtn && !ej2_base_6.isNullOrUndefined(ej2_base_3.select('.e-target', acrdnCtn)));
            cntclkCheck = cntclkCheck && (ej2_base_6.isNullOrUndefined(ej2_base_3.select('.' + CLS_ROOT, acrdnCtn)) || !(ej2_base_3.closest(trgt, '.' + CLS_ROOT) === this.element));
            trgt.classList.remove('e-target');
            if (trgt.classList.contains(CLS_CONTENT) || trgt.classList.contains(CLS_CTENT) || cntclkCheck) {
                return;
            }
            [].slice.call(this.element.children).forEach(function (el) {
                if (el.classList.contains(CLS_ACTIVE)) {
                    acrdActive.push(el);
                }
            });
            var acrdAniEle = [].slice.call(this.element.querySelectorAll('.' + CLS_ITEM + ' [' + CLS_ANIMATE + ']'));
            if (acrdAniEle.length > 0) {
                for (var _i = 0, acrdAniEle_1 = acrdAniEle; _i < acrdAniEle_1.length; _i++) {
                    var el = acrdAniEle_1[_i];
                    acrdActive.push(el.parentElement);
                }
            }
            var sameContentCheck = acrdActive.indexOf(acrdnCtnItem) !== -1 && acrdnCtn.getAttribute('e-animate') === 'true';
            var sameHeader = false;
            if (!ej2_base_6.isNullOrUndefined(acrdnItem) && !ej2_base_6.isNullOrUndefined(acrdnHdr)) {
                var acrdnCtn_1 = ej2_base_3.select('.' + CLS_CONTENT, acrdnItem);
                var acrdnRoot = ej2_base_3.closest(acrdnItem, '.' + CLS_ACRDN_ROOT);
                var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);
                if (ej2_base_6.isNullOrUndefined(acrdnCtn_1)) {
                    return;
                }
                sameHeader = (expandState === acrdnItem);
                if (ej2_base_3.isVisible(acrdnCtn_1) && (!sameContentCheck || acrdnCtnItem.classList.contains(CLS_SLCTED))) {
                    this.collapse(acrdnCtn_1);
                }
                else {
                    if ((acrdActive.length > 0) && this.expandMode === 'Single' && !sameContentCheck) {
                        acrdActive.forEach(function (el) {
                            _this.collapse(ej2_base_3.select('.' + CLS_CONTENT, el));
                            el.classList.remove(CLS_EXPANDSTATE);
                        });
                    }
                    this.expand(acrdnCtn_1);
                }
                if (!ej2_base_6.isNullOrUndefined(expandState) && !sameHeader) {
                    expandState.classList.remove(CLS_EXPANDSTATE);
                }
            }
        };
        Accordion.prototype.eleMoveFocus = function (action, root, trgt) {
            var clst;
            var clstItem = ej2_base_3.closest(trgt, '.' + CLS_ITEM);
            if (trgt === root) {
                clst = ((action === 'moveUp' ? trgt.lastElementChild : trgt).querySelector('.' + CLS_HEADER));
            }
            else if (trgt.classList.contains(CLS_HEADER)) {
                clstItem = (action === 'moveUp' ? clstItem.previousElementSibling : clstItem.nextElementSibling);
                if (clstItem) {
                    clst = ej2_base_3.select('.' + CLS_HEADER, clstItem);
                }
            }
            if (clst) {
                clst.focus();
            }
        };
        Accordion.prototype.keyActionHandler = function (e) {
            var trgt = e.target;
            if (trgt.tagName === 'INPUT') {
                return;
            }
            e.preventDefault();
            var clst;
            var root = this.element;
            var content;
            switch (e.action) {
                case 'moveUp':
                    this.eleMoveFocus(e.action, root, trgt);
                    break;
                case 'moveDown':
                    this.eleMoveFocus(e.action, root, trgt);
                    break;
                case 'space':
                case 'enter':
                    content = trgt.nextElementSibling;
                    if (!ej2_base_6.isNullOrUndefined(content) && content.classList.contains(CLS_CONTENT)) {
                        if (content.getAttribute('e-animate') !== 'true') {
                            trgt.click();
                        }
                    }
                    else {
                        trgt.click();
                    }
                    break;
                case 'home':
                case 'end':
                    clst = e.action === 'home' ? root.firstElementChild.children[0] : root.lastElementChild.children[0];
                    clst.focus();
                    break;
            }
        };
        Accordion.prototype.headerEleGenerate = function () {
            var header = ej2_base_5.createElement('div', { className: CLS_HEADER, id: ej2_base_2.getUniqueID('acrdn_header') });
            var ariaAttr = {
                'tabindex': '0', 'role': 'heading', 'aria-expanded': 'false', 'aria-selected': 'false',
                'aria-disabled': 'false', 'aria-level': this.items.length.toString()
            };
            ej2_base_3.attributes(header, ariaAttr);
            return header;
        };
        Accordion.prototype.renderInnerItem = function (item, index) {
            var innerEle;
            innerEle = ej2_base_5.createElement('div', { className: CLS_ITEM });
            innerEle.id = ej2_base_2.getUniqueID('acrdn_item');
            if (item.header) {
                var ctnEle = this.headerEleGenerate();
                var hdrEle = ej2_base_5.createElement('div', { className: CLS_HEADERCTN });
                ctnEle.appendChild(hdrEle);
                ctnEle.appendChild(this.fetchElement(hdrEle, item.header, index, true));
                innerEle.appendChild(ctnEle);
            }
            var hdr = ej2_base_3.select('.' + CLS_HEADER, innerEle);
            if (item.expanded && !ej2_base_6.isNullOrUndefined(index) && (!this.enablePersistence)) {
                if (this.initExpand.indexOf(index) === -1) {
                    this.initExpand.push(index);
                }
            }
            if (item.cssClass) {
                innerEle.classList.add(item.cssClass);
            }
            if (item.iconCss) {
                var hdrIcnEle = ej2_base_5.createElement('div', { className: CLS_HEADERICN });
                var icon = ej2_base_5.createElement('span', { className: item.iconCss + ' e-icons' });
                hdrIcnEle.appendChild(icon);
                if (ej2_base_6.isNullOrUndefined(hdr)) {
                    hdr = this.headerEleGenerate();
                    hdr.appendChild(hdrIcnEle);
                    innerEle.appendChild(hdr);
                }
                else {
                    hdr.insertBefore(hdrIcnEle, hdr.childNodes[0]);
                }
            }
            if (item.content) {
                var hdrIcon = this.toggleIconGenerate();
                if (ej2_base_6.isNullOrUndefined(hdr)) {
                    hdr = this.headerEleGenerate();
                    innerEle.appendChild(hdr);
                }
                hdr.appendChild(hdrIcon);
                this.add(innerEle, CLS_SLCT);
            }
            return innerEle;
        };
        Accordion.prototype.fetchElement = function (ele, value, index, isHeader) {
            var templateFn;
            var temString;
            try {
                if (document.querySelectorAll(value).length) {
                    var eleVal = document.querySelector(value);
                    temString = eleVal.outerHTML.trim();
                    ele.appendChild(eleVal);
                    eleVal.style.display = '';
                }
            }
            catch (e) {
                templateFn = ej2_base_2.compile(value);
            }
            if (!ej2_base_6.isNullOrUndefined(templateFn) && templateFn().length > 0 && !(ej2_base_6.isNullOrUndefined(templateFn()[0].tagName) && templateFn().length === 1)) {
                [].slice.call(templateFn()).forEach(function (el) {
                    if (!ej2_base_6.isNullOrUndefined(el.tagName)) {
                        el.style.display = '';
                    }
                    ele.appendChild(el);
                });
            }
            else if (ele.childElementCount === 0) {
                ele.innerHTML = value;
            }
            if (!ej2_base_6.isNullOrUndefined(temString)) {
                this.templateEle.push(value);
            }
            return ele;
        };
        Accordion.prototype.ariaAttrUpdate = function (itemEle) {
            var header = ej2_base_3.select('.' + CLS_HEADER, itemEle);
            var content = ej2_base_3.select('.' + CLS_CONTENT, itemEle);
            header.setAttribute('aria-controls', content.id);
            content.setAttribute('aria-labelledby', header.id);
        };
        Accordion.prototype.contentRendering = function (index) {
            var content = this.items[index].content;
            var itemcnt = ej2_base_5.createElement('div', { className: CLS_CONTENT + ' ' + CLS_CTNHIDE, id: ej2_base_2.getUniqueID('acrdn_panel') });
            ej2_base_3.attributes(itemcnt, { 'aria-hidden': 'true' });
            var ctn = ej2_base_5.createElement('div', { className: CLS_CTENT });
            itemcnt.appendChild(this.fetchElement(ctn, content, index, false));
            return itemcnt;
        };
        Accordion.prototype.expand = function (trgt) {
            var eventArgs;
            var trgtItemEle = ej2_base_3.closest(trgt, '.' + CLS_ITEM);
            if (ej2_base_6.isNullOrUndefined(trgt) || (ej2_base_3.isVisible(trgt) && trgt.getAttribute('e-animate') !== 'true') || trgtItemEle.classList.contains(CLS_DISABLE)) {
                return;
            }
            var acrdnRoot = ej2_base_3.closest(trgtItemEle, '.' + CLS_ACRDN_ROOT);
            var expandState = acrdnRoot.querySelector('.' + CLS_EXPANDSTATE);
            var animation = {
                name: this.animation.expand.effect,
                duration: this.animation.expand.duration,
                timingFunction: this.animation.expand.easing
            };
            var icon = ej2_base_3.select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
            eventArgs = { element: trgtItemEle,
                item: this.items[this.getIndexByItem(trgtItemEle)],
                isExpanded: true };
            var eff = animation.name;
            this.trigger('expanding', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            icon.classList.add(CLS_TOGANIMATE);
            this.expandedItemsPush(trgtItemEle);
            if (!ej2_base_6.isNullOrUndefined(expandState)) {
                expandState.classList.remove(CLS_EXPANDSTATE);
            }
            trgtItemEle.classList.add(CLS_EXPANDSTATE);
            if ((animation.name === 'None')) {
                this.expandProgress('begin', icon, trgt, trgtItemEle, eventArgs);
                this.expandProgress('end', icon, trgt, trgtItemEle, eventArgs);
                return;
            }
            this.expandAnimation(eff, icon, trgt, trgtItemEle, animation, eventArgs);
        };
        Accordion.prototype.expandAnimation = function (ef, icn, trgt, trgtItemEle, animate, args) {
            var _this = this;
            var height;
            var trgtHgt;
            if (ef === 'SlideDown') {
                animate.begin = function () {
                    _this.expandProgress('begin', icn, trgt, trgtItemEle, args);
                    trgt.style.position = 'absolute';
                    height = trgtItemEle.offsetHeight;
                    trgtHgt = trgt.offsetHeight;
                    trgt.style.maxHeight = (trgt.offsetHeight) + 'px';
                    trgtItemEle.style.maxHeight = '';
                };
                animate.progress = function () {
                    trgtItemEle.style.minHeight = (height + trgt.offsetHeight) + 'px';
                };
                animate.end = function () {
                    ej2_base_5.setStyleAttribute(trgt, { 'position': '', 'maxHeight': '' });
                    trgtItemEle.style.minHeight = '';
                    _this.expandProgress('end', icn, trgt, trgtItemEle, args);
                };
            }
            else {
                animate.begin = function () {
                    _this.expandProgress('begin', icn, trgt, trgtItemEle, args);
                };
                animate.end = function () {
                    _this.expandProgress('end', icn, trgt, trgtItemEle, args);
                };
            }
            new ej2_base_4.Animation(animate).animate(trgt);
        };
        Accordion.prototype.expandProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(trgt, CLS_CTNHIDE);
            this.add(trgtItemEle, CLS_SLCTED);
            this.add(icon, CLS_EXPANDICN);
            if (progress === 'end') {
                this.add(trgtItemEle, CLS_ACTIVE);
                trgt.setAttribute('aria-hidden', 'false');
                ej2_base_3.attributes(trgt.previousElementSibling, { 'aria-selected': 'true', 'aria-expanded': 'true' });
                icon.classList.remove(CLS_TOGANIMATE);
                this.trigger('expanded', eventArgs);
            }
        };
        Accordion.prototype.expandedItemsPush = function (item) {
            var index = this.getIndexByItem(item);
            if (this.expandedItems.indexOf(index) === -1) {
                this.expandedItems.push(index);
            }
        };
        Accordion.prototype.getIndexByItem = function (item) {
            return [].slice.call(this.element.children).indexOf(item);
        };
        Accordion.prototype.expandedItemsPop = function (item) {
            var index = this.getIndexByItem(item);
            this.expandedItems.splice(this.expandedItems.indexOf(index), 1);
        };
        Accordion.prototype.collapse = function (trgt) {
            var eventArgs;
            var trgtItemEle = ej2_base_3.closest(trgt, '.' + CLS_ITEM);
            if (ej2_base_6.isNullOrUndefined(trgt) || !ej2_base_3.isVisible(trgt) || trgtItemEle.classList.contains(CLS_DISABLE)) {
                return;
            }
            var animation = {
                name: this.animation.collapse.effect,
                duration: this.animation.collapse.duration,
                timingFunction: this.animation.collapse.easing,
            };
            var icon = ej2_base_3.select('.' + CLS_TOOGLEICN, trgtItemEle).firstElementChild;
            eventArgs = { element: trgtItemEle,
                item: this.items[this.getIndexByItem(trgtItemEle)],
                isExpanded: false };
            var eff = animation.name;
            this.trigger('expanding', eventArgs);
            if (eventArgs.cancel) {
                return;
            }
            this.expandedItemsPop(trgtItemEle);
            trgtItemEle.classList.add(CLS_EXPANDSTATE);
            icon.classList.add(CLS_TOGANIMATE);
            if ((animation.name === 'None')) {
                this.collapseProgress('begin', icon, trgt, trgtItemEle, eventArgs);
                this.collapseProgress('end', icon, trgt, trgtItemEle, eventArgs);
                return;
            }
            this.collapseAnimation(eff, trgt, trgtItemEle, icon, animation, eventArgs);
        };
        Accordion.prototype.collapseAnimation = function (ef, trgt, trgtItEl, icn, animate, args) {
            var _this = this;
            var height;
            var trgtHeight;
            var itemHeight;
            var remain;
            if (ef === 'SlideUp') {
                animate.begin = function () {
                    itemHeight = trgtItEl.offsetHeight;
                    trgtItEl.style.minHeight = itemHeight + 'px';
                    trgt.style.position = 'absolute';
                    height = trgtItEl.offsetHeight;
                    trgtHeight = trgt.offsetHeight;
                    trgt.style.maxHeight = trgtHeight + 'px';
                    _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
                };
                animate.progress = function () {
                    remain = ((height - (trgtHeight - trgt.offsetHeight)));
                    if (remain < itemHeight) {
                        trgtItEl.style.minHeight = remain + 'px';
                    }
                };
                animate.end = function () {
                    trgt.style.display = 'none';
                    _this.collapseProgress('end', icn, trgt, trgtItEl, args);
                    trgtItEl.style.minHeight = '';
                    ej2_base_5.setStyleAttribute(trgt, { 'position': '', 'maxHeight': '', 'display': '' });
                };
            }
            else {
                animate.begin = function () {
                    _this.collapseProgress('begin', icn, trgt, trgtItEl, args);
                };
                animate.end = function () {
                    _this.collapseProgress('end', icn, trgt, trgtItEl, args);
                };
            }
            new ej2_base_4.Animation(animate).animate(trgt);
        };
        Accordion.prototype.collapseProgress = function (progress, icon, trgt, trgtItemEle, eventArgs) {
            this.remove(icon, CLS_EXPANDICN);
            this.remove(trgtItemEle, CLS_SLCTED);
            if (progress === 'end') {
                this.add(trgt, CLS_CTNHIDE);
                icon.classList.remove(CLS_TOGANIMATE);
                this.remove(trgtItemEle, CLS_ACTIVE);
                trgt.setAttribute('aria-hidden', 'true');
                ej2_base_3.attributes(trgt.previousElementSibling, { 'aria-selected': 'false', 'aria-expanded': 'false' });
                this.trigger('expanded', eventArgs);
            }
        };
        Accordion.prototype.getModuleName = function () {
            return 'accordion';
        };
        Accordion.prototype.itemAttribUpdate = function () {
            var itemEle = [].slice.call(this.element.children);
            var itemLen = this.items.length;
            itemEle.forEach(function (ele) {
                ej2_base_3.select('.' + CLS_HEADER, ele).setAttribute('aria-level', '' + itemLen);
            });
        };
        Accordion.prototype.addItem = function (item, index) {
            var ele = this.element;
            if (ej2_base_6.isNullOrUndefined(index)) {
                index = this.items.length;
            }
            if (ele.childElementCount >= index) {
                this.items.splice(index, 0, item);
                var innerItemEle = this.renderInnerItem(item, index);
                if (ele.childElementCount === index) {
                    ele.appendChild(innerItemEle);
                }
                else {
                    ele.insertBefore(innerItemEle, ele.children[index]);
                }
                ej2_base_1.EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'focus', this.focusIn, this);
                ej2_base_1.EventHandler.add(innerItemEle.querySelector('.' + CLS_HEADER), 'blur', this.focusOut, this);
                this.itemAttribUpdate();
            }
            this.expandedItems = [];
            this.expandedItemRefresh(ele);
            if (item.expanded) {
                this.expandItem(true, index);
            }
        };
        Accordion.prototype.expandedItemRefresh = function (ele) {
            var _this = this;
            [].slice.call(ele.children).forEach(function (el) {
                if (el.classList.contains(CLS_SLCTED)) {
                    _this.expandedItemsPush(el);
                }
            });
        };
        Accordion.prototype.removeItem = function (index) {
            var ele = this.element.children[index];
            if (ej2_base_6.isNullOrUndefined(ele)) {
                return;
            }
            ej2_base_3.detach(ele);
            this.items.splice(index, 1);
            this.itemAttribUpdate();
            this.expandedItems = [];
            this.expandedItemRefresh(this.element);
        };
        Accordion.prototype.select = function (index) {
            var ele = this.element.children[index];
            if (ej2_base_6.isNullOrUndefined(ele) || ej2_base_6.isNullOrUndefined(ej2_base_3.select('.' + CLS_HEADER, ele))) {
                return;
            }
            ele.children[0].focus();
        };
        Accordion.prototype.hideItem = function (index, isHidden) {
            var ele = this.element.children[index];
            if (ej2_base_6.isNullOrUndefined(ele)) {
                return;
            }
            if (ej2_base_6.isNullOrUndefined(isHidden)) {
                isHidden = true;
            }
            isHidden ? this.add(ele, CLS_ITEMHIDE) : this.remove(ele, CLS_ITEMHIDE);
        };
        Accordion.prototype.enableItem = function (index, isEnable) {
            var ele = this.element.children[index];
            if (ej2_base_6.isNullOrUndefined(ele)) {
                return;
            }
            var eleHeader = ele.firstElementChild;
            if (isEnable) {
                this.remove(ele, CLS_DISABLE);
                ej2_base_3.attributes(eleHeader, { 'tabindex': '0', 'aria-disabled': 'false' });
                eleHeader.focus();
            }
            else {
                if (ele.classList.contains(CLS_ACTIVE)) {
                    this.expandItem(false, index);
                    this.eleMoveFocus('movedown', this.element, eleHeader);
                }
                this.add(ele, CLS_DISABLE);
                eleHeader.setAttribute('aria-disabled', 'true');
                eleHeader.removeAttribute('tabindex');
            }
        };
        Accordion.prototype.expandItem = function (isExpand, index) {
            var _this = this;
            var root = this.element;
            if (ej2_base_6.isNullOrUndefined(index)) {
                if (this.expandMode === 'Single' && isExpand) {
                    var ele = root.children[root.childElementCount - 1];
                    this.itemExpand(isExpand, ele, this.getIndexByItem(ele));
                }
                else {
                    [].slice.call(this.element.children).forEach(function (el) {
                        _this.itemExpand(isExpand, el, _this.getIndexByItem(el));
                    });
                }
            }
            else {
                var ele = this.element.children[index];
                if (ej2_base_6.isNullOrUndefined(ele) || !ele.classList.contains(CLS_SLCT) || (ele.classList.contains(CLS_ACTIVE) && isExpand)) {
                    return;
                }
                else {
                    if (this.expandMode === 'Single') {
                        this.expandItem(false);
                    }
                    this.itemExpand(isExpand, ele, index);
                }
            }
        };
        Accordion.prototype.itemExpand = function (isExpand, ele, index) {
            var ctn = ele.children[1];
            if (ele.classList.contains(CLS_DISABLE)) {
                return;
            }
            if (ej2_base_6.isNullOrUndefined(ctn) && isExpand) {
                ctn = this.contentRendering(index);
                ele.appendChild(ctn);
                this.ariaAttrUpdate(ele);
            }
            else if (ej2_base_6.isNullOrUndefined(ctn)) {
                return;
            }
            isExpand ? this.expand(ctn) : this.collapse(ctn);
        };
        Accordion.prototype.getPersistData = function () {
            var keyEntity = ['expandedItems'];
            return this.addOnPersist(keyEntity);
        };
        Accordion.prototype.onPropertyChanged = function (newProp, oldProp) {
            var acrdn = this.element;
            for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
                var prop = _a[_i];
                switch (prop) {
                    case 'enableRtl':
                        newProp.enableRtl ? this.add(acrdn, CLS_RTL) : this.remove(acrdn, CLS_RTL);
                        break;
                    case 'height':
                        ej2_base_5.setStyleAttribute(this.element, { 'height': ej2_base_6.formatUnit(newProp.height) });
                        break;
                    case 'width':
                        ej2_base_5.setStyleAttribute(this.element, { 'width': ej2_base_6.formatUnit(newProp.width) });
                        break;
                    case 'expandMode':
                        if (newProp.expandMode === 'Single') {
                            this.element.setAttribute('aria-multiselectable', 'false');
                            if (this.expandedItems.length > 1) {
                                this.expandItem(false);
                            }
                        }
                        else {
                            this.element.setAttribute('aria-multiselectable', 'true');
                        }
                        break;
                }
            }
        };
        __decorate([
            ej2_base_4.Collection([], AccordionItem)
        ], Accordion.prototype, "items", void 0);
        __decorate([
            ej2_base_1.Property('100%')
        ], Accordion.prototype, "width", void 0);
        __decorate([
            ej2_base_1.Property('auto')
        ], Accordion.prototype, "height", void 0);
        __decorate([
            ej2_base_1.Property('Multiple')
        ], Accordion.prototype, "expandMode", void 0);
        __decorate([
            ej2_base_5.Complex({}, AccordionAnimationSettings)
        ], Accordion.prototype, "animation", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Accordion.prototype, "clicked", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Accordion.prototype, "expanding", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Accordion.prototype, "expanded", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Accordion.prototype, "created", void 0);
        __decorate([
            ej2_base_1.Event()
        ], Accordion.prototype, "destroyed", void 0);
        Accordion = __decorate([
            ej2_base_4.NotifyPropertyChanges
        ], Accordion);
        return Accordion;
    }(ej2_base_1.Component));
    exports.Accordion = Accordion;
});
