define(["require", "exports", "@syncfusion/ej2-base", "@syncfusion/ej2-base"], function (require, exports, ej2_base_1, ej2_base_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stringCompiler = ej2_base_1.getTemplateEngine();
    function compile(templateEle, helper) {
        if (typeof templateEle === 'string') {
            return stringCompiler(templateEle, helper);
        }
        else {
            var contRef_1 = templateEle.elementRef.nativeElement._viewContainerRef;
            var pName_1 = templateEle.elementRef.nativeElement.propName;
            return function (data, component, propName) {
                var context = { $implicit: data };
                var conRef = contRef_1 ? contRef_1 : component.viewContainerRef;
                var viewRef = conRef.createEmbeddedView(templateEle, context);
                var viewCollection = component ?
                    component.registeredTemplate : ej2_base_2.getValue('currentInstance.registeredTemplate', conRef);
                propName = propName ? propName : pName_1;
                if (typeof viewCollection[propName] === 'undefined') {
                    viewCollection[propName] = [];
                }
                viewCollection[propName].push(viewRef);
                return viewRef.rootNodes;
            };
        }
    }
    exports.compile = compile;
    function Template(defaultValue) {
        return function (target, key) {
            var propertyDescriptor = {
                set: setter(key),
                get: getter(key, defaultValue),
                enumerable: true,
                configurable: true
            };
            Object.defineProperty(target, key, propertyDescriptor);
        };
    }
    exports.Template = Template;
    function setter(key) {
        return function (val) {
            if (val === undefined) {
                return;
            }
            ej2_base_2.setValue(key + 'Ref', val, this);
            if (typeof val !== 'string') {
                val.elementRef.nativeElement._viewContainerRef = this.viewContainerRef;
                val.elementRef.nativeElement.propName = key;
            }
            else {
                if (this.saveChanges) {
                    this.saveChanges(key, val, undefined);
                    this.dataBind();
                }
            }
        };
    }
    function getter(key, defaultValue) {
        return function () {
            return ej2_base_2.getValue(key + 'Ref', this) || defaultValue;
        };
    }
    ej2_base_1.setTemplateEngine({ compile: compile });
});
