import { Component, EmitType } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged, ChildProperty } from '@syncfusion/ej2-base';
import { SliderModel, TicksDataModel, TooltipDataModel } from './slider-model';
/**
 * Configures the ticks data of the Slider.
 */
export declare class TicksData extends ChildProperty<TicksData> {
    /**
     * Specifies the location of the ticks in the Slider. The available options are:
     *
     *  * before - Ticks are placed in the top of the horizontal slider bar or at the left of the vertical slider bar.
     *  * after - Ticks are placed in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
     *  * both - Ticks are placed on the both side of the Slider bar.
     *  * none - Ticks are not shown.
     * @default 'none'
     */
    placement: Placement;
    /**
     * Specifies the distance between two major (large) ticks from the scale of the Slider.
     * @default : 10
     */
    largeStep: number;
    /**
     * Specifies the distance between two minor (small) ticks from the scale of the Slider.
     * @default : 1
     */
    smallStep: number;
    /**
     * Specifies to show or hide the small ticks in the Slider.
     * @default : false
     */
    showSmallTicks: boolean;
    /**
     * Specifies the format of the Slider scale value.
     */
    format: string;
}
/**
 * Specifies the TooltipChange Event arguments.
 */
export interface SliderTooltipEventArgs {
    /**
     * Returns the value of the Slider.
     */
    value: number | number[];
    /**
     * Returns the text shown in the Slider tooltip.
     */
    text: string;
}
/**
 * Specifies the Slider Change/Changed Event arguments.
 */
export interface SliderChangeEventArgs {
    /**
     * Returns the value of the Slider.
     */
    value: number | number[];
    /**
     * Returns the previous value of the Slider.
     */
    previousValue: number | number[];
    /**
     * Returns the current value of the Slider tooltip.
     */
    text?: string;
    /**
     * Returns the action applied on the Slider.
     */
    action: string;
}
/**
 * Specifies the TicksRender Event arguments.
 */
export interface SliderTickEventArgs {
    /**
     * Returns the value of the tick.
     */
    value: number;
    /**
     * Returns the label of the tick.
     */
    text: string;
    /**
     * Returns the current tick element.
     */
    tickElement: Element;
}
/**
 * Specifies the ticks rendered Event arguments.
 */
export interface SliderTickRenderedEventArgs {
    /**
     * Returns the wrapper of the ticks element.
     */
    ticksWrapper: HTMLElement;
    /**
     * Returns the collection of tick elements.
     */
    tickElements: HTMLElement[];
}
/**
 * Specifies the tooltip data in slider.
 */
export declare class TooltipData extends ChildProperty<TooltipData> {
    /**
     * Sets the CSS classes to root element of the Tooltip which helps to customize the complete UI styles.
     * @default ''
     */
    cssClass: string;
    /**
     * Specifies the position for the tooltip element in the Slider. The available options are:
     *
     *  * before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.
     *  * after - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
     */
    placement: TooltipPlacement;
    /**
     * Determines on which open mode, the tooltip needs to be shown.
     * With the default value set to auto, tooltip appears when the user hovers or focuses on a target on the desktop.
     * If the Tooltip is to be displayed on touch devices,
     * then one needs to tap and hold the target element to view it's related content.
     */
    showOn: TooltipShowOn;
    /**
     * Specifies to show / hide the tooltip of the Slider.
     */
    isVisible: boolean;
    /**
     * Specifies the format to be rendered in tooltip content.
     */
    format: string;
}
/**
 * Ticks Placement.
 */
export declare type Placement = 'before' | 'after' | 'both' | 'none';
/**
 * Tooltip Placement.
 */
export declare type TooltipPlacement = 'before' | 'after';
/**
 * Tooltip ShowOn.
 */
export declare type TooltipShowOn = 'focus' | 'hover' | 'always' | 'auto';
/**
 * Slider type.
 */
export declare type SliderType = 'default' | 'minRange' | 'range';
/**
 * Slider orientation.
 */
export declare type SliderOrientation = 'horizontal' | 'vertical';
/**
 * The Slider component allows the user to select a value or range
 * of values in-between a min and max range, by dragging the handle over the slider bar.
 * ```html
 * <div id='slider'></div>
 * ```
 * ```typescript
 * <script>
 *   var sliderObj = new Slider({ value: 10 });
 *   sliderObj.appendTo('#slider');
 * </script>
 * ```
 */
export declare class Slider extends Component<HTMLElement> implements INotifyPropertyChanged {
    private hiddenInput;
    private firstHandle;
    private sliderContainer;
    private secondHandle;
    private rangeBar;
    private onresize;
    private currentVal;
    private handlePos1;
    private handlePos2;
    private rtl;
    private preHandlePos1;
    private preHandlePos2;
    private handleVal1;
    private handleVal2;
    private val;
    private activeHandle;
    private sliderTrack;
    private firstMaterialHandle;
    private secondMaterialHandle;
    private firstBtn;
    private firstTooltipObj;
    private secondTooltipObj;
    private firstTooltipElement;
    private secondTooltipElement;
    private secondBtn;
    private ul;
    private firstChild;
    private firstHandleTooltipPosition;
    private secondHandleTooltipPosition;
    private lastChild;
    private previousTooltipClass;
    private horDir;
    private verDir;
    private transition;
    private transitionOnMaterialTooltip;
    private scaleTransform;
    private previousVal;
    private previousChanged;
    private repeatInterval;
    private isMaterial;
    private zIndex;
    private l10n;
    private internationalization;
    private tooltipFormatInfo;
    private ticksFormatInfo;
    private customAriaText;
    private noOfDecimals;
    private tickElementCollection;
    /**
     * Specifies the current value of the Slider. The value should be specified in array of number when render Slider `type` as `range`.
     * @default null
     */
    value: number | number[];
    /**
     * The step value of the Slider.
     * The `step` value determines the amount of Slider value change when increase / decrease button are clicked
     * or press arrow keys or handle is dragged.
     * @default 1
     */
    step: string | number;
    /**
     * The minimum value of the Slider.
     * @default 0
     */
    min: string | number;
    /**
     * The maximum value of the Slider.
     * @default 100
     */
    max: string | number;
    /**
     * Specifies the readOnly of the slider.
     * @default false
     */
    readOnly: boolean;
    /**
     * Specifies the type of the Slider. The available options are:
     *
     *  * default - Used to select a single value in the Slider.
     *  * minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.
     *  * range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.
     */
    type: SliderType;
    /**
     * Specifies the ticks placement and it's step value.
     * @default { placement: 'before' }
     */
    ticks: TicksDataModel;
    /**
     * Specifies the state of the Slider. If set to false then it disables the Slider.
     * @default true
     */
    enabled: boolean;
    /**
     * Sets a value that enables or disables the RTL mode on the Slider. If it is true,
     * Slider perform the action in the right to left direction.
     * @default false
     */
    enableRtl: boolean;
    /**
     * Specifies the slider tooltip and it's position.
     * @default { placement: 'before', isVisible: false, showOn: 'focus', format: null }
     */
    tooltip: TooltipDataModel;
    /**
     * Specifies to show or hide the increase and decrease buttons of the Slider.
     * @default false
     */
    showButtons: boolean;
    /**
     * Specifies to enable or disable the Slider handle moving animation.
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Specifies the orientation of the Slider.
     */
    orientation: SliderOrientation;
    /**
     * Sets the CSS classes to root element of the Slider which helps to customize the complete UI styles.
     * @default ''
     */
    cssClass: string;
    /**
     * Triggers when Slider is created.
     * @event
     */
    created: EmitType<Object>;
    /**
     * Triggers when the Slider value is changed.
     * @event
     */
    change: EmitType<Object>;
    /**
     * Triggers when the Slider action is completed with change in Slider value.
     * @event
     */
    changed: EmitType<Object>;
    /**
     * Triggers when rendering the ticks on the Slider.
     * @event
     */
    renderingTicks: EmitType<Object>;
    /**
     * Triggers when the ticks are rendered on the Slider.
     * @event
     */
    renderedTicks: EmitType<Object>;
    /**
     * Triggers when change the Slider tooltip value.
     * @event
     */
    tooltipChange: EmitType<SliderTooltipEventArgs>;
    constructor(options?: SliderModel, element?: string | HTMLElement);
    protected preRender(): void;
    private initCultureFunc();
    private initCultureInfo();
    private formatString(value, formatInfo);
    private formatNumber(value);
    private numberOfDecimals(value);
    private makeRoundNumber(value, precision);
    private fractionalToInteger(value);
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private initialize();
    private setCSSClass(oldCSSClass?);
    private setEnabled();
    private getTheme(container);
    /**
     * Initialize the rendering
     * @private
     */
    private initRender();
    private createRangeBar();
    private setOrientClass();
    private setAriaAttributes(element);
    private createSecondHandle();
    private createFirstHandle();
    private wireFirstHandleEvt(destroy);
    private wireSecondHandleEvt(destroy);
    private handleStart();
    private transitionEnd(e);
    private handleFocusOut();
    private handleFocus(e);
    private handleOver(e);
    private handleLeave(e);
    private setHandler();
    private setEnableRTL();
    private tooltipValue();
    private setTooltipContent();
    private formatContent(formatInfo, ariaContent);
    private addTooltipClass(content);
    private tooltipPlacement();
    private tooltipBeforeOpen(args);
    private wireMaterialTooltipEvent(destroy);
    private tooltipPositionCalculation(position);
    private getTooltipTransformProperties(className);
    private openMaterialTooltip();
    private checkTooltipPosition(args);
    private renderTooltip();
    private tooltipAfterClose(args);
    private setButtons();
    private buttonTitle();
    private buttonFocusOut();
    private repeatButton(args);
    private repeatHandlerMouse(args);
    private materialChange();
    private repeatHandlerUp(e);
    private renderScale();
    private createTick(li, start);
    private scaleAlignment();
    private tickValuePosition();
    private setAriaAttrValue(element);
    private handleValueUpdate();
    private buttonClick(args);
    private tooltipAnimation();
    private buttonUp(args);
    private setRangeBar();
    private setValue();
    private rangeValueUpdate();
    private validateRangeValue();
    private modifyZindex();
    private setHandlePosition();
    private getHandle();
    private setRangeValue();
    private changeEvent(eventName);
    private changeEventArgs(eventName);
    private setPreviousVal(eventName, value);
    private updateRangeValue();
    private checkHandlePosition(value);
    private checkHandleValue(value);
    private onResize();
    private changeHandleValue(value);
    private tempStartEnd();
    private xyToPosition(position);
    private stepValueCalculation(value);
    private add(a, b, addition);
    private round(a);
    private positionToValue(pos);
    private sliderBarClick(evt);
    private refreshTooltipOnMove();
    private sliderDown(event);
    private sliderBarUp();
    private sliderBarMove(evt);
    private checkRepeatedValue(currentValue);
    private refreshTooltip();
    private openTooltip();
    private keyDown(event);
    private wireButtonEvt(destroy);
    private wireEvents();
    private unwireEvents();
    private keyUp(event);
    private hover(event);
    private sliderFocusOut(event);
    private closeTooltip();
    private removeElement(element);
    private changeSliderType(type);
    private changeRtl();
    private changeOrientation();
    private updateConfig();
    /**
     * Get the properties to be maintained in the persisted state.
     * @private
     */
    protected getPersistData(): string;
    /**
     * Prepares the slider for safe removal from the DOM.
     * Detaches all event handlers, attributes, and classes to avoid memory leaks.
     * @method destroy
     * @return {void}
     */
    destroy(): void;
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */
    onPropertyChanged(newProp: SliderModel, oldProp: SliderModel): void;
    private setReadOnly();
    private setZindex();
    setTooltip(): void;
    /**
     * Gets the component name
     * @private
     */
    getModuleName(): string;
}
