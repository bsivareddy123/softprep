import { Component, EventHandler, Property, Event, EmitType, Complex } from '@syncfusion/ej2-base';import { L10n, Internationalization, NumberFormatOptions } from '@syncfusion/ej2-base';import { NotifyPropertyChanges, INotifyPropertyChanged, ChildProperty } from '@syncfusion/ej2-base';import { createElement, attributes, addClass, removeClass, setStyleAttribute, detach } from '@syncfusion/ej2-base';import { isNullOrUndefined, formatUnit, Browser } from '@syncfusion/ej2-base';import { Tooltip, Position, TooltipEventArgs } from '@syncfusion/ej2-popups';
import {Placement,TooltipPlacement,TooltipShowOn,SliderType,SliderOrientation,SliderTooltipEventArgs} from "./slider";
import {ComponentModel} from '@syncfusion/ej2-base';

/**
 * Interface for a class TicksData
 */
export interface TicksDataModel {

    /**
     * Specifies the location of the ticks in the Slider. The available options are:
     *
     *  * before - Ticks are placed in the top of the horizontal slider bar or at the left of the vertical slider bar.
     *  * after - Ticks are placed in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
     *  * both - Ticks are placed on the both side of the Slider bar.
     *  * none - Ticks are not shown.     
     * @default 'none'
     */
    placement?: Placement;

    /**
     * Specifies the distance between two major (large) ticks from the scale of the Slider.
     * @default : 10
     */
    largeStep?: number;

    /**
     * Specifies the distance between two minor (small) ticks from the scale of the Slider.
     * @default : 1
     */
    smallStep?: number;

    /**
     * Specifies to show or hide the small ticks in the Slider.
     * @default : false
     */
    showSmallTicks?: boolean;

    /**
     * Specifies the format of the Slider scale value.
     */
    format?: string;

}

/**
 * Interface for a class TooltipData
 */
export interface TooltipDataModel {

    /**
     * Sets the CSS classes to root element of the Tooltip which helps to customize the complete UI styles.
     * @default ''
     */
    cssClass?: string;

    /**
     * Specifies the position for the tooltip element in the Slider. The available options are:
     *
     *  * before - Tooltip is shown in the top of the horizontal slider bar or at the left of the vertical slider bar.
     *  * after - Tooltip is shown in the bottom of the horizontal slider bar or at the right of the vertical slider bar.
     */
    placement?: TooltipPlacement;

    /**
     * Determines on which open mode, the tooltip needs to be shown.
     * With the default value set to auto, tooltip appears when the user hovers or focuses on a target on the desktop.
     * If the Tooltip is to be displayed on touch devices,
     * then one needs to tap and hold the target element to view it's related content.
     */
    showOn?: TooltipShowOn;

    /**
     * Specifies to show / hide the tooltip of the Slider.
     */
    isVisible?: boolean;

    /**
     * Specifies the format to be rendered in tooltip content.
     */
    format?: string;

}

/**
 * Interface for a class Slider
 */
export interface SliderModel extends ComponentModel{

    /**
     * Specifies the current value of the Slider. The value should be specified in array of number when render Slider `type` as `range`.
     * @default null
     */
    value?: number | number[];

    /**
     * The step value of the Slider.
     * The `step` value determines the amount of Slider value change when increase / decrease button are clicked
     * or press arrow keys or handle is dragged.
     * @default 1
     */
    step?: string | number;

    /**
     * The minimum value of the Slider.
     * @default 0
     */
    min?: string | number;

    /**
     * The maximum value of the Slider.
     * @default 100
     */
    max?: string | number;

    /**
     * Specifies the readOnly of the slider.
     * @default false
     */
    readOnly?: boolean;

    /**
     * Specifies the type of the Slider. The available options are:
     *
     *  * default - Used to select a single value in the Slider.
     *  * minRange - Used to select a single value in the Slider. It displays shadow from the start value to the current value.
     *  * range - Used to select a range of values in the Slider. It displays shadow in-between the selection range.
     */
    type?: SliderType;

    /**
     * Specifies the ticks placement and it's step value.
     * @default { placement: 'before' }
     */
    ticks?: TicksDataModel;

    /**
     * Specifies the state of the Slider. If set to false then it disables the Slider.
     * @default true
     */
    enabled?: boolean;

    /**
     * Sets a value that enables or disables the RTL mode on the Slider. If it is true,
     * Slider perform the action in the right to left direction.
     * @default false
     */
    enableRtl?: boolean;

    /**
     * Specifies the slider tooltip and it's position.
     * @default { placement: 'before', isVisible: false, showOn: 'focus', format: null }
     */
    tooltip?: TooltipDataModel;

    /**
     * Specifies to show or hide the increase and decrease buttons of the Slider.
     * @default false
     */
    showButtons?: boolean;

    /**
     * Specifies to enable or disable the Slider handle moving animation.
     * @default true
     */
    enableAnimation?: boolean;

    /**
     * Specifies the orientation of the Slider.
     */
    orientation?: SliderOrientation;

    /**
     * Sets the CSS classes to root element of the Slider which helps to customize the complete UI styles.
     * @default ''
     */
    cssClass?: string;

    /**
     * Triggers when Slider is created.
     * @event
     */
    created?: EmitType<Object>;

    /**
     * Triggers when the Slider value is changed.
     * @event
     */
    change?: EmitType<Object>;

    /**
     * Triggers when the Slider action is completed with change in Slider value.
     * @event
     */
    changed?: EmitType<Object>;

    /**
     * Triggers when rendering the ticks on the Slider.
     * @event
     */
    renderingTicks?: EmitType<Object>;

    /**
     * Triggers when the ticks are rendered on the Slider.
     * @event
     */
    renderedTicks?: EmitType<Object>;

    /**
     * Triggers when change the Slider tooltip value.
     * @event
     */
    tooltipChange?: EmitType<SliderTooltipEventArgs>;

}