import { Component, Property, Event, EmitType, EventHandler, classList, L10n, compile, isNullOrUndefined } from '@syncfusion/ej2-base';import { NotifyPropertyChanges, INotifyPropertyChanged, createElement, detach, append, Animation } from '@syncfusion/ej2-base';import { addClass, removeClass, KeyboardEvents, KeyboardEventArgs, setValue, getValue } from '@syncfusion/ej2-base';
import {AsyncSettings,Buttons,FilesInfo,SelectedEventArgs,RemovingEventArgs,ClearingEventArgs} from "./uploader";
import {ComponentModel} from '@syncfusion/ej2-base';

/**
 * Interface for a class Uploader
 */
export interface UploaderModel extends ComponentModel{

    /**
     * Gets or sets values that indicates about asynchronous upload.
     * @default { saveUrl: '', removeUrl: '' }
     */
    asyncSettings?: AsyncSettings;

    /**
     * Gets or sets a value that indicates to align content in the Uploader control from right to left by setting the property as true.
     * @default false
     */
    enableRtl?: boolean;

    /**
     * Gets or sets the value that indicates whether the component is in enable or disable.
     * @default true
     */
    enabled?: boolean;

    /**
     * Accept the template design and assign it to each file presented in upload.
     * @default null
     */
    template?: string;

    /**
     * Gets or sets a value that indicates whether the multiple file selection is enabled.
     * @default true
     */
    multiple?: boolean;

    /**
     * After the file selection is done, that file will upload automatically without any interaction.
     * If it as false means, after the file selected, need to upload the file by click on the upload button
     * @default true
     */
    autoUpload?: boolean;

    /**
     * Gets or sets the text/HTML content for browse, upload and cancel button
     * @default { browse : 'Browse', clear: 'Clear', upload: 'Upload' }
     */
    buttons?: Buttons;

    /**
     * Gets or sets the value that indicate to what type of the files can upload based on the file extension.
     * @default ''
     */
    allowedExtensions?: string;

    /**
     * Gets or sets the minimum file size to select for upload.
     * @default 0
     */
    minFileSize?: number;

    /**
     * Gets or sets the maximum file size to select for upload.
     * @default 30000000
     */
    maxFileSize?: number;

    /**
     * Gets or sets the value that indicates whether to enable the drag and drop support for file upload and
     * specify the drag area to drop and select that file
     * @default null
     */
    dropArea?: string | HTMLElement;

    /**
     * For already uploaded files removing purpose, the list of files that will be initially rendered in the files
     * list with uploaded successfully.
     * The files option is available only when the upload is in async mode.
     * @default { name: '', size: null, type: '' }
     */
    files?: FilesInfo | FilesInfo[];

    /**
     * To show or hide the file list.
     * @default true
     */
    showFileList?: boolean;

    /**
     * Triggers after select the files which need to be upload.
     * @event
     */
    selected?: EmitType<SelectedEventArgs>;

    /**
     * Triggers when start to upload the selected file.
     * @event
     */
    uploading?: EmitType<Object>;

    /**
     * Triggers when the selected file uploaded/removed successfully.
     * @event
     */
    success?: EmitType<Object>;

    /**
     * Triggers when Ajax request fails to upload files or to remove files.
     * @event
     */
    failure?: EmitType<Object>;

    /**
     * Triggers before remove the items in the file list.
     * @event
     */
    removing?: EmitType<RemovingEventArgs>;

    /**
     * Triggers before clear all the items in the file list.
     * @event
     */
    clearing?: EmitType<ClearingEventArgs>;

    /**
     * Triggers when Ajax request is in progress for upload a file to server from local.
     * @event
     */
    progress?: EmitType<Object>;

    /**
     * Triggers when changes occurs in uploaded file list.
     * @event
     */
    change?: EmitType<Object>;

}