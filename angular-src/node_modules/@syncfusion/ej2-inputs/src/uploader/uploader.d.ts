import { Component, EmitType } from '@syncfusion/ej2-base';
import { INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { UploaderModel } from './uploader-model';
export interface FileInfo {
    name: string;
    rawFile: string | Blob;
    size: number;
    status: string;
    type: string;
    validationMessages: ValidationMessages;
}
export interface Buttons {
    browse?: string | HTMLElement;
    upload?: string | HTMLElement;
    clear?: string | HTMLElement;
}
export interface AsyncSettings {
    saveUrl?: string;
    removeUrl?: string;
}
export interface ValidationMessages {
    minSize?: string;
    maxSize?: string;
}
export interface SelectedEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
    isModified: boolean;
    modifiedFilesData: FileInfo[];
    progressInterval: string;
}
export interface RemovingEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
}
export interface ClearingEventArgs {
    cancel: boolean;
    filesData: FileInfo[];
}
export interface FilesInfo {
    name: string;
    type: string;
    size: number;
}
/**
 * The Uploader component allows the user to upload the files to server.
 * ```html
 * <input type='file' name='images[]' id='upload'/>
 * ```
 * ```typescript
 * <script>
 *   var uploadObj = new Uploader();
 *   uploadObj.appendTo('#upload');
 * </script>
 * ```
 */
export declare class Uploader extends Component<HTMLInputElement> implements INotifyPropertyChanged {
    private initialAttr;
    private uploadWrapper;
    private browseButton;
    private listParent;
    private cloneElement;
    private fileList;
    private actionButtons;
    private uploadButton;
    private clearButton;
    private dropAreaWrapper;
    private filesData;
    private uploadedFilesData;
    private dropZoneElement;
    private currentStatus;
    private l10n;
    private uploadTemplateFn;
    private keyboardModule;
    private progressInterval;
    private progressAnimation;
    private isForm;
    private keyConfigs;
    private localeText;
    /**
     * Gets or sets values that indicates about asynchronous upload.
     * @default { saveUrl: '', removeUrl: '' }
     */
    asyncSettings: AsyncSettings;
    /**
     * Gets or sets a value that indicates to align content in the Uploader control from right to left by setting the property as true.
     * @default false
     */
    enableRtl: boolean;
    /**
     * Gets or sets the value that indicates whether the component is in enable or disable.
     * @default true
     */
    enabled: boolean;
    /**
     * Accept the template design and assign it to each file presented in upload.
     * @default null
     */
    template: string;
    /**
     * Gets or sets a value that indicates whether the multiple file selection is enabled.
     * @default true
     */
    multiple: boolean;
    /**
     * After the file selection is done, that file will upload automatically without any interaction.
     * If it as false means, after the file selected, need to upload the file by click on the upload button
     * @default true
     */
    autoUpload: boolean;
    /**
     * Gets or sets the text/HTML content for browse, upload and cancel button
     * @default { browse : 'Browse', clear: 'Clear', upload: 'Upload' }
     */
    buttons: Buttons;
    /**
     * Gets or sets the value that indicate to what type of the files can upload based on the file extension.
     * @default ''
     */
    allowedExtensions: string;
    /**
     * Gets or sets the minimum file size to select for upload.
     * @default 0
     */
    minFileSize: number;
    /**
     * Gets or sets the maximum file size to select for upload.
     * @default 30000000
     */
    maxFileSize: number;
    /**
     * Gets or sets the value that indicates whether to enable the drag and drop support for file upload and
     * specify the drag area to drop and select that file
     * @default null
     */
    dropArea: string | HTMLElement;
    /**
     * For already uploaded files removing purpose, the list of files that will be initially rendered in the files
     * list with uploaded successfully.
     * The files option is available only when the upload is in async mode.
     * @default { name: '', size: null, type: '' }
     */
    files: FilesInfo | FilesInfo[];
    /**
     * To show or hide the file list.
     * @default true
     */
    showFileList: boolean;
    /**
     * Triggers after select the files which need to be upload.
     * @event
     */
    selected: EmitType<SelectedEventArgs>;
    /**
     * Triggers when start to upload the selected file.
     * @event
     */
    uploading: EmitType<Object>;
    /**
     * Triggers when the selected file uploaded/removed successfully.
     * @event
     */
    success: EmitType<Object>;
    /**
     * Triggers when Ajax request fails to upload files or to remove files.
     * @event
     */
    failure: EmitType<Object>;
    /**
     * Triggers before remove the items in the file list.
     * @event
     */
    removing: EmitType<RemovingEventArgs>;
    /**
     * Triggers before clear all the items in the file list.
     * @event
     */
    clearing: EmitType<ClearingEventArgs>;
    /**
     * Triggers when Ajax request is in progress for upload a file to server from local.
     * @event
     */
    progress: EmitType<Object>;
    /**
     * Triggers when changes occurs in uploaded file list.
     * @event
     */
    change: EmitType<Object>;
    /**
     * Triggers when change the Uploader value.
     */
    constructor(options?: UploaderModel, element?: string | HTMLInputElement);
    /**
     * Calls internally if any of the property value is changed.
     * @private
     */
    onPropertyChanged(newProp: UploaderModel, oldProp: UploaderModel): void;
    private setLocalizedTexts();
    private getKeyValue(val);
    private updateFileList();
    private reRenderFileList();
    protected preRender(): void;
    protected getPersistData(): string;
    /**
     * Return the module name of the component.
     */
    getModuleName(): string;
    /**
     * To Initialize the control rendering
     * @private
     */
    render(): void;
    private renderBrowseButton();
    private renderActionButtons();
    private wireActionButtonEvents();
    private unwireActionButtonEvents();
    private removeActionButtons();
    private renderButtonTemplates();
    private initializeUpload();
    private renderPreLoadFiles();
    private checkActionButtonStatus();
    private setDropArea();
    private setMultipleSelection();
    private checkAutoUpload(fileData);
    private wireEvents();
    private unWireEvents();
    private keyActionHandler(e);
    private setReverseFocus(e);
    private setTabFocus(e);
    private removeFocus();
    private browseButtonClick();
    private uploadButtonClick();
    private clearButtonClick();
    private bindDropEvents();
    private unBindDropEvents();
    private onDragLeave(e);
    private dragHover(e);
    private dropElement(e);
    private removeFiles(args);
    private removeFilesData(file);
    private removeUploadedFile(file);
    private removeCompleted(e, files);
    private removeFailed(e, files);
    private onSelectFiles(args);
    private clearData();
    private updateSortedFileList(filesData);
    private checkExtension(files);
    private validatedFileSize(fileSize);
    private createCustomfileList(fileData);
    private createParentUL();
    private createFileList(fileData);
    private truncateName(name);
    private getFileType(name);
    private getFileNameOnly(name);
    private setInitialAttributes();
    private filterfileList(files);
    private updateStatus(files, status?);
    private getLiElement(files);
    private createProgressBar(liElement);
    private updateProgressbar(e, li);
    private changeProgressValue(li, progressValue);
    private uploadInProgress(e, files, customUI?);
    private uploadComplete(e, files, customUI?);
    private uploadFailed(e, files);
    private updateProgressBarClasses(li, className);
    private removeProgressbar(li, callType);
    private animateProgressBar(li, callType);
    private setExtensions(extensions);
    private templateComplier(uploadTemplate);
    private setRTL();
    private localizedTexts(localeText);
    private setControlStatus();
    private checkHTMLAttributes();
    /**
     * Convert the file size from bytes to kilo bytes or mega bytes.
     * @param { number } bytes - specifies the file size in bytes.
     * @returns string
     */
    bytesToSize(bytes: number): string;
    /**
     * Sort the files data alphabetically.
     * @param { FileList } filesData - specifies the files data for upload.
     * @returns File[]
     */
    sortFileList(filesData: FileList): File[];
    /**
     * Removes the component from the DOM and detaches all its related event handlers. Also it removes the attributes and classes.
     * @method destroy
     * @return {void}.
     */
    destroy(): void;
    /**
     * Upload all the selected files if pass empty argument to this method.
     * If we pass specific file_data as argument to this method, that file only will get upload.
     * @param { FileInfo[] } files - specifies the files data for upload.
     * @returns void
     */
    upload(files: FileInfo[], custom?: boolean): void;
    /**
     * All the selected/uploaded files are remove if pass empty argument to this method.
     * if we pass specific file_data as argument to this method, that corresponding file only remove.
     * @param { FileInfo | FileInfo[] } fileData - specifies the files data to remove from file list/server.
     * @returns void
     */
    remove(fileData?: FileInfo | FileInfo[]): void;
    /**
     * Clear the file list from upload.
     * @returns void
     */
    clearAll(): void;
    getFilesData(): FileInfo[];
}
